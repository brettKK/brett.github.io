<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>brettkk</title>
    <link>http://brettkk.github.io/</link>
    <description>Recent content on brettkk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 05 Nov 2022 11:33:56 +0800</lastBuildDate><atom:link href="http://brettkk.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>linux-tcp</title>
      <link>http://brettkk.github.io/posts/os/tcp/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/tcp/</guid>
      <description>tcp报文结构图 URG: 表示紧急指针（urgent pointer）</description>
    </item>
    
    <item>
      <title>rust-library-core</title>
      <link>http://brettkk.github.io/posts/rust/rust_library_core/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_library_core/</guid>
      <description>rust library core 🔗 common sense 🔗 unfold fold all 收拢代码细节 展开代码细节 pub(crate) struct NeverShortCircuit(pub T); item 可以在</description>
    </item>
    
    <item>
      <title>module name and module import path in Go</title>
      <link>http://brettkk.github.io/posts/golang/golang_mod/</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_mod/</guid>
      <description>1. golang管理依赖 🔗 Modules are how Go manages dependencies. 1.1 module and packages 🔗 A module is a collection of packages.</description>
    </item>
    
    <item>
      <title>闭包closure</title>
      <link>http://brettkk.github.io/posts/rust/closure_at_go_c_py_rust/</link>
      <pubDate>Fri, 05 Aug 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/closure_at_go_c_py_rust/</guid>
      <description>why PL need closure? 🔗想一下在函数式编程语言中，宣传函数是一等公民，把函</description>
    </item>
    
    <item>
      <title>golang</title>
      <link>http://brettkk.github.io/posts/golang/golang/</link>
      <pubDate>Sat, 07 May 2022 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang/</guid>
      <description>资料 🔗 目前golang的主要maintainer之一: Russ Cox 个</description>
    </item>
    
    <item>
      <title>linux-base</title>
      <link>http://brettkk.github.io/posts/os/base_os/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/base_os/</guid>
      <description>资料 🔗操作系统：南大 jyy。 http://jyywiki.cn/OS/2022/ https://elixir.bootlin.com/linux/lastest/source Linux 版本 🔗uname -a 查看系统</description>
    </item>
    
    <item>
      <title>vs code 小结</title>
      <link>http://brettkk.github.io/posts/tools/vs_code/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/vs_code/</guid>
      <description>1 vscode 快捷键 🔗1.1 工作区快捷键 🔗 Cmd + Shift + P -》显示命令面板 Cmd+P</description>
    </item>
    
    <item>
      <title>makefile</title>
      <link>http://brettkk.github.io/posts/os/makefile/</link>
      <pubDate>Thu, 05 May 2022 10:13:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/makefile/</guid>
      <description>GNU make is implemented by Richard Stallman and Roland McGrath. Respect. why 🔗大型项目编译过程复杂，需要管理编译</description>
    </item>
    
    <item>
      <title>欧州与宗教</title>
      <link>http://brettkk.github.io/posts/culture/euro/</link>
      <pubDate>Tue, 05 Apr 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/euro/</guid>
      <description>1亚伯拉罕，犹太历史 🔗亚伯拉罕是犹太教、基督教和伊斯兰教共同</description>
    </item>
    
    <item>
      <title>跑步</title>
      <link>http://brettkk.github.io/posts/culture/sport/</link>
      <pubDate>Tue, 05 Apr 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/sport/</guid>
      <description>Eliud Kipchoge: no human is limited The Last Milestone: https://www.bilibili.com/video/BV1Ca411n74Z</description>
    </item>
    
    <item>
      <title>go embedding</title>
      <link>http://brettkk.github.io/posts/golang/golang_embedding/</link>
      <pubDate>Sat, 05 Mar 2022 08:34:12 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_embedding/</guid>
      <description>why 为什么需要在golang使用embedding 🔗golan</description>
    </item>
    
    <item>
      <title>程序 等价 状态机</title>
      <link>http://brettkk.github.io/posts/os/state_machine/</link>
      <pubDate>Wed, 05 Jan 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/state_machine/</guid>
      <description>软件、程序可以很复杂。但是计算机的本质还是冯诺伊曼定义的：程</description>
    </item>
    
    <item>
      <title>runc</title>
      <link>http://brettkk.github.io/posts/cloud_native/runc/</link>
      <pubDate>Sat, 26 Jun 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/runc/</guid>
      <description>runc 是根据OCI（Open Container Initiative）开放容器标准</description>
    </item>
    
    <item>
      <title>prometheus</title>
      <link>http://brettkk.github.io/posts/cloud_native/prometheus/</link>
      <pubDate>Thu, 24 Jun 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/prometheus/</guid>
      <description>在解决内存与磁盘的读写模式、性能的不匹配问题。有以下两点： 在</description>
    </item>
    
    <item>
      <title>加密相关</title>
      <link>http://brettkk.github.io/posts/os/encrypt/</link>
      <pubDate>Thu, 20 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/encrypt/</guid>
      <description>对称加密与散列 🔗有des, aes 方式， 计算性能好，但密钥的安全依</description>
    </item>
    
    <item>
      <title>go同步编码方式</title>
      <link>http://brettkk.github.io/posts/golang/golang_sync/</link>
      <pubDate>Thu, 06 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_sync/</guid>
      <description>11 🔗 协程切换与线程切换的区别 切换需要切换2个地方：栈和寄存器</description>
    </item>
    
    <item>
      <title>go test</title>
      <link>http://brettkk.github.io/posts/golang/go_test/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_test/</guid>
      <description>工具 🔗 Guru 导航go 代码的编辑器集成工具 变量，函数的声明地点 变量</description>
    </item>
    
    <item>
      <title>go timer</title>
      <link>http://brettkk.github.io/posts/golang/go_timer/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_timer/</guid>
      <description>Go提供了两种定时器，分为：一次性定时器、周期性定时器。 两种</description>
    </item>
    
    <item>
      <title>http, curl, dns</title>
      <link>http://brettkk.github.io/posts/os/http/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/http/</guid>
      <description>http 🔗 http header 常用字段 content-type (如何解析body) application/x-www-form-urlencoded multipart/from-data, 上传文件 application/json, text/plain text/xml, XM</description>
    </item>
    
    <item>
      <title>linux-free</title>
      <link>http://brettkk.github.io/posts/os/free/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/free/</guid>
      <description>free查看内存使用情况，包含已用内存，可用内存，交换内存的</description>
    </item>
    
    <item>
      <title>linux-shell</title>
      <link>http://brettkk.github.io/posts/os/shell-basic/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/shell-basic/</guid>
      <description>单引号，双引号，反引号区别 单引号之间的内容原封不动的输出 双引</description>
    </item>
    
    <item>
      <title>linux-top</title>
      <link>http://brettkk.github.io/posts/os/top/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/top/</guid>
      <description>linux top命令（mac top结果显示有一些区别） Linux下常</description>
    </item>
    
    <item>
      <title>mac安装开发环境</title>
      <link>http://brettkk.github.io/posts/tools/mac_start_dev/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/mac_start_dev/</guid>
      <description>macbook的指令集 uname -a or uname -m 新m1芯片下是arm64 老i</description>
    </item>
    
    <item>
      <title>mysql 小结</title>
      <link>http://brettkk.github.io/posts/store_db/mysql/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/mysql/</guid>
      <description>存储 🔗存储引擎-是创建表时设置，存储引擎是表级别的使用 innodb: 只有</description>
    </item>
    
    <item>
      <title>redis 小结</title>
      <link>http://brettkk.github.io/posts/store_db/redis/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/redis/</guid>
      <description>支持的value类型： 字符串，hash，列表，集合，有序集合</description>
    </item>
    
    <item>
      <title>rustc</title>
      <link>http://brettkk.github.io/posts/rust/rustc/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rustc/</guid>
      <description>very fast rust primer 🔗 low-level, no language runtime (like c/c++) focus on memory safety and practicality ownership, lefttime, borrow checking for references. https://doc.rust-lang.org/book/ help forum: https://user.rust-lang.org rustc architecture 🔗</description>
    </item>
    
    <item>
      <title>soot, wala</title>
      <link>http://brettkk.github.io/posts/java/soot_wala/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/java/soot_wala/</guid>
      <description>4中IR Baf 在bytecode上进行的抽象，忽略字节码对于常量</description>
    </item>
    
    <item>
      <title>安全与风控</title>
      <link>http://brettkk.github.io/posts/os/secure_risk/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/secure_risk/</guid>
      <description>漏洞 🔗起因是信任了用户的任意输入。 sql注入 🔗危害： 执行任意</description>
    </item>
    
    <item>
      <title>电影对白</title>
      <link>http://brettkk.github.io/posts/francais/common_sense/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/common_sense/</guid>
      <description>《scent of a woman》 Slade this is such a crock of shit Slade you are in the Barrett school not</description>
    </item>
    
    <item>
      <title>bug_fix</title>
      <link>http://brettkk.github.io/posts/golang/bug_fix/</link>
      <pubDate>Tue, 04 May 2021 19:10:43 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/bug_fix/</guid>
      <description>一些bug init() 函数滥用 函数功能是查询类的，能不用指针传参数就不</description>
    </item>
    
    <item>
      <title>Alphabet Français</title>
      <link>http://brettkk.github.io/posts/francais/fran%C3%A7ais/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/fran%C3%A7ais/</guid>
      <description>mac下输入快捷键 🔗法语特殊符输入方法（Mac下） œ = option + q</description>
    </item>
    
    <item>
      <title>go lock</title>
      <link>http://brettkk.github.io/posts/golang/go_lock/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_lock/</guid>
      <description>locks 锁 源码包的结构 🔗 sync包 sync.Mutex sync.RWMutex sync.Cond sync.WaitGroup sync.Once sync.Pool 涉及的内容很多 cache line padding</description>
    </item>
    
    <item>
      <title>go内存模型</title>
      <link>http://brettkk.github.io/posts/golang/gomemorymodel/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/gomemorymodel/</guid>
      <description>go的内存模型规定： 在哪些情况下，一个golang中读取的变</description>
    </item>
    
    <item>
      <title>go_toolchain</title>
      <link>http://brettkk.github.io/posts/golang/go_toolchain/</link>
      <pubDate>Sat, 01 May 2021 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_toolchain/</guid>
      <description>an overview of go&#39;s tooling 🔗 table of content installing tooling $ GO111MODULE=on go get golang.org/x/tools/cmd/stresss go get -u, 强制使用网络去更新包和</description>
    </item>
    
    <item>
      <title>europe</title>
      <link>http://brettkk.github.io/posts/francais/euro/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/euro/</guid>
      <description>欧洲历史 🔗 欧洲历史 古希腊，罗马文明 古希腊文明 苏格拉底 柏拉图 亚</description>
    </item>
    
    <item>
      <title>k8s 编码模式学习</title>
      <link>http://brettkk.github.io/posts/cloud_native/k8s_code_pattern/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/k8s_code_pattern/</guid>
      <description>draft todo k8s 组件 kubectl client-go kube-apiserver kube-controller kube-scheduler kubelet kube-proxy 周围项目 🔗k8s.io/gengo k8s.io/client-go</description>
    </item>
    
    <item>
      <title>matrix</title>
      <link>http://brettkk.github.io/posts/math/matrix/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/matrix/</guid>
      <description>3b1b 视频系列 线性代数 矩阵的几何意义 矩阵是对空间的一次变化 行列式</description>
    </item>
    
    <item>
      <title>point of view</title>
      <link>http://brettkk.github.io/posts/culture/point_of_view/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/point_of_view/</guid>
      <description>关于信息 🔗现代人的信息困境： 一面焦虑错过信息，一面对某些信息</description>
    </item>
    
    <item>
      <title>明</title>
      <link>http://brettkk.github.io/posts/culture/ming/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/ming/</guid>
      <description>为什么研究历史的人，喜欢研究明历史？ 🔗无少数民族干涉，汉族正</description>
    </item>
    
    <item>
      <title>等额本息</title>
      <link>http://brettkk.github.io/posts/math/loan/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/loan/</guid>
      <description>涉及的变量 🔗 本金M 期数N 利率R 等额本息X 公式推导 🔗当N=1时</description>
    </item>
    
    <item>
      <title>java 小结</title>
      <link>http://brettkk.github.io/posts/java/java/</link>
      <pubDate>Fri, 05 Mar 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/java/java/</guid>
      <description>Class文件格式图 1 class文件由十个部分组成 javap</description>
    </item>
    
    <item>
      <title>kubernetes</title>
      <link>http://brettkk.github.io/posts/cloud_native/my-first-post/</link>
      <pubDate>Wed, 03 Mar 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/my-first-post/</guid>
      <description>service mesh 🔗微服务内部有分布式环境下的通用功能：熔断策略、负载均衡</description>
    </item>
    
    <item>
      <title>lsm 小结</title>
      <link>http://brettkk.github.io/posts/store_db/log_structure_tree/</link>
      <pubDate>Wed, 03 Mar 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/log_structure_tree/</guid>
      <description>lsm 基本想法 🔗使用场景， 写多读少，例如存调用链的服务。 应用：l</description>
    </item>
    
    <item>
      <title>mac上安装和使用虚拟机</title>
      <link>http://brettkk.github.io/posts/tools/%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
      <pubDate>Fri, 18 Sep 2020 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid>
      <description>必要性 🔗 因为使用的是mac笔记本，实验和开发上需要利用lin</description>
    </item>
    
    <item>
      <title>计算复杂度--P, NP, NPC, NP hard</title>
      <link>http://brettkk.github.io/posts/math/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Fri, 18 Sep 2020 09:13:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/about/tmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/about/tmp/</guid>
      <description>1 排序后根据index取 public int findKthLargest(int[] nums, int k) { int len = nums.length; Arrays.sort(nums); return nums[len - k]; }
2 小顶堆 装数组，poll (len-k-1)后， peek为第k大的元素
3 大顶堆 装数组， poll (k-1)后， peek为第k大的元素</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/culture/chinese_dynasty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/chinese_dynasty/</guid>
      <description>中国朝代表。
夏商周秦西东汉 三国两晋南北朝 隋唐五代北南宋 下接元明与清朝。
商朝 公元前1570 - 前1045
周朝 前1045 - 前256
汉朝 前202 - 220
隋唐 581 - 907
五代十国 五代907-960. 辽907-1124
宋 960 - 1276
北宋 960 - 1127 宋太祖 960 - 976 宋太宗 976 - 997 宋真宗 997 - 1022 宋仁宗 1022 - 1063 宋英宗 1063 - 1067 宋神宗 1067 - 1085 熙宁 1068 - 1077， 元丰 1078 - 1085 宋哲宗 1085 - 1100 神宗的儿子，徽宗的哥哥。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/culture/jinrong/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/jinrong/</guid>
      <description>大A指数。 换筹。确定2800底部。
美元指数见底，即美元即将出逃。 现在的美元指数顶背离走，美元通胀，加息。
本质A股市场应对美元加息回流的战役。 将投机性美元回来之前，将市场拉到更高的位置。
美联储加息 🔗加息 与 通胀的关系。
社会中钱和商品的数量需要有一定的对应关系。 如果钱的数量不随商品的增加而增加的话，物价会发生波动。 商品价格P * 商品数量Q = 货币总量。
钱多了，商品增加数量根不上，商品价格会上涨，通货膨胀。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/culture/north_euro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/north_euro/</guid>
      <description>北欧文化。
Gökotta： dawn picnic to hear the first birdsong. the act of rising in the early morning to watch the birds or to go outside to appreciate nature.
在瑞典。在黎明是起床去听鸟叫的声音， 去外面感受大自然。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/other/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/other/</guid>
      <description>约瑟夫环 🔗 1-N个人，形成一个圈，从编号为1开始报数1，数到M的人x出列，x之后的人再次从1开始喊 直到最后一个人，求这个人的编号
数组 🔗遍历数组，数到m的位置标记为-1， 直到数组中仅剩一个非-1的元素，返回元素的位置
环形链表 🔗不做标记，直接从环形链表中删除。
type Node struct{ int num, next Node, } func createCircleLink(int n) Node{ head := Node{num: 1} cur = head for i := 2; i &amp;lt; n; i++ { tmp := Node{num: i} cur.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/queue/</guid>
      <description>type Queue struct { items []int } func New() *Queue { return &amp;amp;Queue{ items: []int{} } } func (q *Queue) Enqueue(item int) { q.items = append(q.items, item) } func (q *Queue) Dequeue() int { if len(q.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/skiplist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/skiplist/</guid>
      <description> type Element struct { score float64 value interface{} forward []*Element } type SkipList struct { header *Element len int level int } </description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/string/</guid>
      <description>字符串格式的数字相加 🔗最长回文子串 🔗字符串匹配算法 🔗BM KMP</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/math/algeb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/algeb/</guid>
      <description>高等代数
研究对象 初中， 方程，一元一次方程。ax+b = c。 一元二次方程，求根公式。
一元高次方程的求根
n元线性方程组， 矩阵消元法，增广矩阵经过初等行变换，变为阶梯形矩阵。
二元一次方程。
行列式，矩阵，初等变换，线性方程组求解。
高斯消元法 --初等变换--》 阶梯形方程组 --》 非零行的行数为矩阵的秩
解的情况判定和解的结构 矩阵的秩与解的关系
矩阵的特征值和特征向量，几何意义 相似矩阵，相似对角化，二次型的标准型与规范型 合同变换，合同矩阵。 正交矩阵，正交变换
偏序关系 集合之间的包含关系 实数之间的小于等于关系 实数之间的大于等于关系 整数之间的整除关系 自反： 反对称： R是集合A上的关系，如果R是自反的，反对称的，传递的，R是A上的一个偏序或者半序。 偏序集合 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</guid>
      <description>1 极限，连续 🔗连续的定义 🔗初等函数在定义域内都是连续的。 一般讨论高等函数，如分段函数。
极限的定义 🔗极限的求法 🔗无穷小 $$ lim $$
，无穷大
洛必达法则求极限
2 导数（微商），微分 🔗导数叫微商，是极限。
导数的定义。 🔗导数的几何意义。 🔗斜率
求导的方法 🔗复合函数的求导
隐函数的求导。
导数的应用 🔗单调性，求极值，凹凸性（二阶导数）
3 不定积分，定积分 🔗不定积分 🔗不定积分： 求函数f的全部原函数。
4 定积分的应用 🔗定积分：给定区间里无限分割求和</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/os/c&#43;&#43;/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/c&#43;&#43;/</guid>
      <description>概念
指针不扎手，但扎心。C語言: ++*p, *p++和 *++p的不同
纯虚函数， 改写，虚函数。 抽象基类， 派生类。
is-a 关系是传递的。派生类 is a 基类，可以直接将派生类对象转换为基类对象。
表达式是一个递归定义的概念。 一个单独的标识符（变量，常量，函数等）是表达式。 表达式和运算符按照语法规则构成的复杂表达式是表达式。
C++ 动态特性。 🔗程序的功能是在运行时刻才能确定下来的。 C++ 虚函数， 抽象基类，动态绑定，多态。
虚函数 🔗class Shape{ public: virtual void Draw(void); }; class Rectangle : public Shape { public: virtual void Draw(void); } 抽象基类 🔗class Shape { // 抽象基类 public: virtual void Draw(void)=0; //纯虚函数 } 动态绑定 🔗程序中通过基类指针对虚函数的调用。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/os/file_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/file_system/</guid>
      <description>块存储、文件存储、对象存储
存储的两种方式 用电子存储数据 U盘，固态硬盘SSD 用磁性记录数据 机械硬盘HDD 垂直式 叠瓦式 linux: 一切皆文件。
分布式存储
同步IO 异步IO： 指的是I/O 的执行者，是同步处理后返回，还是先返回给应用程序后异步通知。
阻塞IO 非阻塞IO： 指的是IO的调用者，是阻塞等待结果，还是异步等通知。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/os/nju-os/nju_os/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/nju-os/nju_os/</guid>
      <description>http://jyywiki.cn/os/2022/
02 程序与编译器 🔗在vi里编译c文件。 :!gcc %
什么是程序？ 🔗你在南京大学上过最牛的课是什么？
《程序设计语言的形式语义》 梁红瑾
gdb a.out layout src (c程序视角) layout asm （汇编视角） start
问题1: gdb Unable to find Mach task port 解决过程： mac下不能安装gdb， lldb替代。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/rust/rust_chain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_chain/</guid>
      <description>https://justjjy.com/ solidity 智能合约语言。
exa = rust ls
tokio, axum
github.com/skerkour/kerkour.com
rCore OS.
IDA, NDK。
虚拟人， metaverse NFT</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/rust/rust_concurrency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_concurrency/</guid>
      <description>fn spawn&amp;lt;F, T&amp;gt;(f: F) -&amp;gt; JoinHandle&amp;lt;T&amp;gt; where F: FnOnce() -&amp;gt; T, F: Send + &amp;#39;static, T: Send + &amp;#39;static, </description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/rust/rust_problem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_problem/</guid>
      <description>rust-analyzer failed to load workspace: Failed to read Cargo metadata from Cargo.toml file /Users/gonglei/rust-workspace/rust/Cargo.toml, cargo 1.53.0 (4369396ce 2021-04-27): Failed to run &amp;quot;cargo&amp;quot; &amp;quot;metadata&amp;quot; &amp;quot;--format-version&amp;quot; &amp;quot;1&amp;quot; &amp;quot;--manifest-path&amp;quot; &amp;quot;/Users/gonglei/rust-workspace/rust/Cargo.toml&amp;quot; &amp;quot;--filter-platform&amp;quot; &amp;quot;aarch64-apple-darwin&amp;quot;: cargo metadata exited with an error: error: failed to load manifest for workspace member /Users/gonglei/rust-workspace/rust/src/bootstrap Caused by: failed to parse manifest at /Users/gonglei/rust-workspace/rust/src/bootstrap/Cargo.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/store_db/store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/store/</guid>
      <description>块存储 🔗文件存储 🔗对象存储 🔗对象存储系统： 接入层， 索引层（mysql， redis，etcd），存储层，服务平台
索引： 单对象，分片对象</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/todo_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/todo_list/</guid>
      <description>今天要做什么？
整理之前的笔记。
～～～～ 清晰的网页 ～～ 清晰的网页 ～～～～
工作内容相关方面： 规则引擎grule[11.1]， 工作流引擎，向量存储Faiss。
golang方面： cloudwego, Istio, envoy, hystrix-go[10.31,11.1]
密码方面： 零知识信任的代码库， rust。
云原生方面：k8s, docker.
数据库方面： TiDB， TiKV， rocksdb。
编译器： llvm。 编译器基本知识。
高并发方面： C++， redis， rocksdb， linux， xv6 。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/git/</guid>
      <description>git clone 🔗clone时的shadow clone 和 deep clone
git submodules
https://git-scm.com/book/en/v2/Git-Tools-Submodules
git clone --recursive https://github.com/rust-lang/rust.git
LibreSSL SSL_read: error:02FFF03C:system library:func(4095):Operation timed out, errno 60 Failed to connect to github.com port 443 after 130469 ms: Connection timed out</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/latex/</guid>
      <description>字符编码 🔗ascii码，占一个字节，实际使用了7 bit,128个字符，表示英语够了。 在ascii码的第8位置为0，这个特点深深影响了其他国家和后来的字符编码方式。
欧洲法语é等字符，采用Latin1, 利用acsii码的最高位， 可以表示了。
亚洲国家的文字符号更多，汉字10万加，必须多个字节表示一个符号。 GB2312
unicode 万国码。只是定义了符号的二进制代码，如何区分不同的编码？没有规定二进制如何存放。
utf-8历史， 开发plan 9操作系统的产物，发明了后来广泛使用的字符编码。 utf-8 是一种针对unicode的变长字符编码的实现方式。 使用1-4个字节表示一个字符。 二进制代码第一位是0， 则这个字符只占一个字节。 如果第一位是1，连续有多少个1，表示当前字符占用多少个字节, 后面字节的前两位均以10开头。
例如 严。 unicode = 100111000100101 = 4E25, utf-8=11100100 10111000 10100101 = E4B8A5.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/pkg_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/pkg_tools/</guid>
      <description>安装goyacc
go get modernc.org/goyacc
https://pkg.go.dev/golang.org/x/tools/cmd/goyacc
tldr (too long didn&#39;t read) . brew install tldr
nano
画图
draw.io （加载速度慢） xournal （操作不方便） excalidraw （本地localhost web） cd excalidraw(source code directory) docker-compose up --build -d NDK, IDA</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/pku_%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/pku_%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF/</guid>
      <description>软件分析技术（Software Analysis）
哥德尔不完备定理
莱斯定理
数据流分析
过程间分析，指针分析，控制流分析，抽象解释
约束求解，符号执行
数据流分析 🔗活跃变量分析
可达性分析
可用表达式分析
https://xiongyingfei.github.io/SA/2020/main.htm
《编译原理》Aho
《Lecture notes on static analysis》Moller and Schwartzbach
https://cs.au.dk/~amoeller/spa/
南京大学《软件分析》课（B站视频）
《Decision Procedures -- An Algorithmic Point of View》 Daniel Kroening and Ofer Strichman</description>
    </item>
    
  </channel>
</rss>
