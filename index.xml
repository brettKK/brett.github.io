<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>brettkk</title>
    <link>http://brettkk.github.io/</link>
    <description>Recent content on brettkk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Jan 2023 11:33:56 +0800</lastBuildDate><atom:link href="http://brettkk.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rust concurrency</title>
      <link>http://brettkk.github.io/posts/rust/rust_concurrency/</link>
      <pubDate>Thu, 05 Jan 2023 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_concurrency/</guid>
      <description>lock free structure 🔗不用上锁,利用原子操作实现的并发安全的数据结构。 single producer,</description>
    </item>
    
    <item>
      <title>tidb学习</title>
      <link>http://brettkk.github.io/posts/store_db/tidb/</link>
      <pubDate>Thu, 05 Jan 2023 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/tidb/</guid>
      <description>整体架构 🔗二层（1 sql层无状态，处理用户请求和sql运算逻</description>
    </item>
    
    <item>
      <title>etcd 小结</title>
      <link>http://brettkk.github.io/posts/store_db/etcd/</link>
      <pubDate>Mon, 05 Dec 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/etcd/</guid>
      <description>etcd使用场景 🔗 共享配置 服务发现 选主 分布式队列 分布式锁 etcd arch</description>
    </item>
    
    <item>
      <title>环境问题 &#43; 类型系统疑问</title>
      <link>http://brettkk.github.io/posts/rust/rust_problem/</link>
      <pubDate>Mon, 21 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_problem/</guid>
      <description>在vscode下配置rust项目的阅读和debug 🔗rust</description>
    </item>
    
    <item>
      <title>rustc</title>
      <link>http://brettkk.github.io/posts/rust/rustc/</link>
      <pubDate>Tue, 15 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rustc/</guid>
      <description>快速看下rust语言，very fast rust primer 🔗 low-level, no language runtime (like c/c++) focus on memory safety and</description>
    </item>
    
    <item>
      <title>tokio</title>
      <link>http://brettkk.github.io/posts/rust/tokio/</link>
      <pubDate>Tue, 15 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/tokio/</guid>
      <description>tokio 🔗核心是为了提高系统的吞吐量，而非延迟。 基于os的epol</description>
    </item>
    
    <item>
      <title>《The Rust Programming Language》book</title>
      <link>http://brettkk.github.io/posts/rust/rust-lang/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust-lang/</guid>
      <description>Tour of Rust 以简单的例子串讲，很好入手 《The Rust Programming Language</description>
    </item>
    
    <item>
      <title>linux-tcp，http, curl, dns</title>
      <link>http://brettkk.github.io/posts/os/tcp_udp/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/tcp_udp/</guid>
      <description>udp 🔗光速：30万千米/s 中美具体大约：1.5万千米 光纤网络耗</description>
    </item>
    
    <item>
      <title>rust-library-core</title>
      <link>http://brettkk.github.io/posts/rust/rust_library_core/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_library_core/</guid>
      <description>rust library core 🔗读一下 rust-lang的源码， core正好是不依赖</description>
    </item>
    
    <item>
      <title>rust-library-std</title>
      <link>http://brettkk.github.io/posts/rust/rust_library_std/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_library_std/</guid>
      <description>HashMap 🔗#[derive(Clone)] pub struct RandomState { k0: u64, k1: u64, } // hashmap 的</description>
    </item>
    
    <item>
      <title>跑步</title>
      <link>http://brettkk.github.io/posts/culture/running/</link>
      <pubDate>Wed, 05 Oct 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/running/</guid>
      <description>Eliud Kipchoge: no human is limited 🔗The Last Milestone: https://www.bilibili.com/video/BV1Ca411n74Z</description>
    </item>
    
    <item>
      <title>module name and module import path in Go</title>
      <link>http://brettkk.github.io/posts/golang/golang_mod/</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_mod/</guid>
      <description>1. golang管理依赖 🔗 Modules are how Go manages dependencies. 1.1 module and packages 🔗 A module is a collection of packages.</description>
    </item>
    
    <item>
      <title>闭包closure</title>
      <link>http://brettkk.github.io/posts/rust/closure_at_go_c_py_rust/</link>
      <pubDate>Fri, 05 Aug 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/closure_at_go_c_py_rust/</guid>
      <description>why PL need closure? 🔗想一下在函数式编程语言中，宣传函数是一等公民，把函</description>
    </item>
    
    <item>
      <title>golang</title>
      <link>http://brettkk.github.io/posts/golang/golang/</link>
      <pubDate>Sat, 07 May 2022 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang/</guid>
      <description>资料 🔗 目前golang的主要maintainer之一: Russ Cox 个</description>
    </item>
    
    <item>
      <title>linux</title>
      <link>http://brettkk.github.io/posts/os/base_os/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/base_os/</guid>
      <description>资料 🔗操作系统：南大 jyy。 http://jyywiki.cn/OS/2022/ MIT 6.S081 https://elixir.bootlin.com/linux/lastest/source Linux 版本 🔗uname -a 查看</description>
    </item>
    
    <item>
      <title>vs code 小结</title>
      <link>http://brettkk.github.io/posts/tools/vs_code/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/vs_code/</guid>
      <description>1 vscode 快捷键 🔗1.1 工作区快捷键 🔗 Cmd + Shift + P -》显示命令面板 Cmd+P</description>
    </item>
    
    <item>
      <title>软件工具集</title>
      <link>http://brettkk.github.io/posts/tools/pkg_tools/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/pkg_tools/</guid>
      <description>tldr (too long didn&#39;t read) . brew install tldr nano 画图 draw.io （加载速度慢） xournal （操作不方便） excalidraw （</description>
    </item>
    
    <item>
      <title>历史文化：欧州与宗教</title>
      <link>http://brettkk.github.io/posts/culture/euro/</link>
      <pubDate>Tue, 05 Apr 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/euro/</guid>
      <description>犹太教 基督教 新教 （源于马丁路德） 天主教 基督教的宗派之一，罗马</description>
    </item>
    
    <item>
      <title>go embedding</title>
      <link>http://brettkk.github.io/posts/golang/golang_embedding/</link>
      <pubDate>Sat, 05 Mar 2022 08:34:12 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_embedding/</guid>
      <description>why 为什么需要在golang使用embedding 🔗golan</description>
    </item>
    
    <item>
      <title>计算机程序 等价于 状态机</title>
      <link>http://brettkk.github.io/posts/os/state_machine/</link>
      <pubDate>Wed, 05 Jan 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/state_machine/</guid>
      <description>计算机的本质 🔗软件、程序可以很复杂。但是计算机的本质还是冯诺</description>
    </item>
    
    <item>
      <title>容器 &amp; k8s</title>
      <link>http://brettkk.github.io/posts/os/dockerk8s/</link>
      <pubDate>Sun, 27 Jun 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/dockerk8s/</guid>
      <description>容器 🔗docker架构，镜像，容器，网络，存储。 容器规范OC</description>
    </item>
    
    <item>
      <title>加密相关</title>
      <link>http://brettkk.github.io/posts/math/encrypt/</link>
      <pubDate>Thu, 20 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/encrypt/</guid>
      <description>对称加密与散列 🔗有des, aes 方式， 计算性能好，但密钥的安全依</description>
    </item>
    
    <item>
      <title>go同步编码方式</title>
      <link>http://brettkk.github.io/posts/golang/golang_sync/</link>
      <pubDate>Thu, 06 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_sync/</guid>
      <description>11 🔗 协程切换与线程切换的区别 切换需要切换2个地方：栈和寄存器</description>
    </item>
    
    <item>
      <title>go test</title>
      <link>http://brettkk.github.io/posts/golang/go_test/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_test/</guid>
      <description>工具 🔗 Guru 导航go 代码的编辑器集成工具 变量，函数的声明地点 变量</description>
    </item>
    
    <item>
      <title>go timer</title>
      <link>http://brettkk.github.io/posts/golang/go_timer/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_timer/</guid>
      <description>Go提供了两种定时器，分为：一次性定时器、周期性定时器。 两种</description>
    </item>
    
    <item>
      <title>linux shell 工具命令</title>
      <link>http://brettkk.github.io/posts/os/shell/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/shell/</guid>
      <description>ls = list ls -a (display all files) ls -l (more infomation) ls -lh (file size k) 磁盘相关的命令 🔗 du 显示某个</description>
    </item>
    
    <item>
      <title>mac安装开发环境</title>
      <link>http://brettkk.github.io/posts/tools/mac_start_dev/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/mac_start_dev/</guid>
      <description>macbook的指令集 uname -a or uname -m 新m1芯片下是arm64 老i</description>
    </item>
    
    <item>
      <title>mysql 小结</title>
      <link>http://brettkk.github.io/posts/store_db/mysql/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/mysql/</guid>
      <description>mysql 起源&amp;amp;基础 🔗 创建表时的存储引擎 🔗 存储引擎-是创建表</description>
    </item>
    
    <item>
      <title>python</title>
      <link>http://brettkk.github.io/posts/tools/python/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/python/</guid>
      <description>python 解释器 🔗cpython， pypy https://github.com/makeyourownneuralnetwork Colab服务： colab.research.google.com 数据分析包：</description>
    </item>
    
    <item>
      <title>redis 小结</title>
      <link>http://brettkk.github.io/posts/store_db/redis/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/redis/</guid>
      <description>redis 安装、使用 🔗redis 安装 wget https://download.redis.io/releases/redis-6.2.4.tar.gz tar -zvxf redis-6.2.4 mv ~/redis-6.2.4 /usr/local/redis cd /usr/local/redis make 编译 make PREFIX=/usr/local/redis install</description>
    </item>
    
    <item>
      <title>rust unsafe</title>
      <link>http://brettkk.github.io/posts/rust/rust_unsafe/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_unsafe/</guid>
      <description>fn main() { let mut d = String::from(&amp;#34;aaaa&amp;#34;); let d_len = d.len(); { // 去掉 or 不去掉 let mut e = String::wtih_capacity(d_len); unsafe { // 两个</description>
    </item>
    
    <item>
      <title>soot, wala</title>
      <link>http://brettkk.github.io/posts/tools/soot_wala/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/soot_wala/</guid>
      <description>4中IR Baf 在bytecode上进行的抽象，忽略字节码对于常量</description>
    </item>
    
    <item>
      <title>电影对白</title>
      <link>http://brettkk.github.io/posts/francais/common_sense/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/common_sense/</guid>
      <description>《scent of a woman》 西班牙歌曲 Por una Cabeza Slade this is such a crock of shit</description>
    </item>
    
    <item>
      <title>bug_fix</title>
      <link>http://brettkk.github.io/posts/golang/bug_fix/</link>
      <pubDate>Tue, 04 May 2021 19:10:43 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/bug_fix/</guid>
      <description>一些bug init() 函数滥用 函数功能是查询类的，能不用指针传参数就不</description>
    </item>
    
    <item>
      <title>Alphabet Français</title>
      <link>http://brettkk.github.io/posts/francais/fran%C3%A7ais/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/fran%C3%A7ais/</guid>
      <description>mac下输入快捷键 🔗法语特殊符输入方法（Mac下） œ = option + q</description>
    </item>
    
    <item>
      <title>go lock</title>
      <link>http://brettkk.github.io/posts/golang/go_lock/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_lock/</guid>
      <description>locks 锁 源码包的结构 🔗 sync包 sync.Mutex sync.RWMutex sync.Cond sync.WaitGroup sync.Once sync.Pool 涉及的内容很多 cache line padding</description>
    </item>
    
    <item>
      <title>go内存模型</title>
      <link>http://brettkk.github.io/posts/golang/gomemorymodel/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/gomemorymodel/</guid>
      <description>go的内存模型规定： 在哪些情况下，一个golang中读取的变</description>
    </item>
    
    <item>
      <title>go_toolchain</title>
      <link>http://brettkk.github.io/posts/golang/go_toolchain/</link>
      <pubDate>Sat, 01 May 2021 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_toolchain/</guid>
      <description>an overview of go&#39;s tooling 🔗 table of content installing tooling $ GO111MODULE=on go get golang.org/x/tools/cmd/stresss go get -u, 强制使用网络去更新包和</description>
    </item>
    
    <item>
      <title>中国历史的时间表</title>
      <link>http://brettkk.github.io/posts/culture/chinese_dynasty/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/chinese_dynasty/</guid>
      <description>历史的编年体 🔗夏商周秦西东汉 三国两晋南北朝 隋唐五代北南宋 下接</description>
    </item>
    
    <item>
      <title>字符串匹配KMP</title>
      <link>http://brettkk.github.io/posts/leetcode/string/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/string/</guid>
      <description>字符串匹配算法 🔗为了加速字符串的匹配 KMP： input source string</description>
    </item>
    
    <item>
      <title>等额本息</title>
      <link>http://brettkk.github.io/posts/math/loan/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/loan/</guid>
      <description>涉及的变量 🔗 本金M 期数N 利率R 等额本息X 公式推导 🔗当N=1时</description>
    </item>
    
    <item>
      <title>java 小结</title>
      <link>http://brettkk.github.io/posts/tools/java/</link>
      <pubDate>Fri, 05 Mar 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/java/</guid>
      <description>Class文件格式图 1 class文件由十个部分组成 javap</description>
    </item>
    
    <item>
      <title>lsm 小结</title>
      <link>http://brettkk.github.io/posts/store_db/log_structure_tree/</link>
      <pubDate>Wed, 03 Mar 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/log_structure_tree/</guid>
      <description>lsm 基本想法 🔗使用场景， 写多读少，例如存调用链的服务。 应用：l</description>
    </item>
    
    <item>
      <title>代数 algebra</title>
      <link>http://brettkk.github.io/posts/math/algeb/</link>
      <pubDate>Fri, 05 Feb 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/algeb/</guid>
      <description>高等代数 🔗3Blue1Brown的系列视频 线性代数的本质 矩阵</description>
    </item>
    
    <item>
      <title>mac上安装和使用虚拟机</title>
      <link>http://brettkk.github.io/posts/tools/%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
      <pubDate>Fri, 18 Sep 2020 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid>
      <description>必要性 🔗 因为使用的是mac笔记本，实验和开发上需要利用lin</description>
    </item>
    
    <item>
      <title>计算复杂度--P, NP, NPC, NP hard</title>
      <link>http://brettkk.github.io/posts/math/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Fri, 18 Sep 2020 09:13:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/other/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/other/</guid>
      <description>约瑟夫环 🔗 1-N个人，形成一个圈，从编号为1开始报数1，数到M的人x出列，x之后的人再次从1开始喊 直到最后一个人，求这个人的编号
数组 🔗遍历数组，数到m的位置标记为-1， 直到数组中仅剩一个非-1的元素，返回元素的位置
环形链表 🔗不做标记，直接从环形链表中删除。
type Node struct{ int num, next Node, } func createCircleLink(int n) Node{ head := Node{num: 1} cur = head for i := 2; i &amp;lt; n; i++ { tmp := Node{num: i} cur.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/queue/</guid>
      <description>type Queue struct { items []int } func New() *Queue { return &amp;amp;Queue{ items: []int{} } } func (q *Queue) Enqueue(item int) { q.items = append(q.items, item) } func (q *Queue) Dequeue() int { if len(q.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/skiplist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/skiplist/</guid>
      <description> type Element struct { score float64 value interface{} forward []*Element } type SkipList struct { header *Element len int level int } </description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</guid>
      <description>数学分析 🔗1 极限，连续 🔗连续的定义 🔗初等函数在定义域内都是连续的。 一般讨论高等函数，如分段函数。
极限的定义 🔗极限的求法 🔗无穷小 $$ lim $$
，无穷大
洛必达法则求极限
2 导数（微商），微分 🔗导数叫微商，是极限。
导数的定义。 🔗导数的几何意义。 🔗斜率
求导的方法 🔗复合函数的求导
隐函数的求导。
导数的应用 🔗单调性，求极值，凹凸性（二阶导数）
3 不定积分，定积分 🔗不定积分 🔗不定积分： 求函数f的全部原函数。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/os/nju-os/nju_os/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/nju-os/nju_os/</guid>
      <description>http://jyywiki.cn/os/2022/
02 程序与编译器 🔗在vi里编译c文件。 :!gcc %
什么是程序？ 🔗你在南京大学上过最牛的课是什么？
《程序设计语言的形式语义》 梁红瑾
gdb a.out layout src (c程序视角) layout asm （汇编视角） start
问题1: gdb Unable to find Mach task port 解决过程： mac下不能安装gdb， lldb替代。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/rust/rust_chain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_chain/</guid>
      <description>let data = ptr_map(ptr, |addr| addr | KIND_VEC); f_closure = ｜addr｜(addr|KIND_VEC) github.com/skerkour/kerkour.com
rCore OS.
IDA, NDK。
计算机软件 = 存储（tidb，tikv，rocksdb）， 计算（zero knoledge）， 网络（tokio） 网络 🔗futures-rs 🔗futres-channel 🔗tokio-rs/Bytes 🔗Bytes BytesMut 存储连续字节的容器结构。 trait Buf BufMut 提供读，写行为。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/todo_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/todo_list/</guid>
      <description>今天要做什么？
整理之前的笔记。
～～～～ 清晰的网页 ～～ 清晰的网页 ～～～～
工作内容相关方面： 规则引擎grule[11.1]， 工作流引擎， 向量存储Faiss。
golang方面： cloudwego, Istio, envoy, hystrix-go[10.31,11.1]
密码方面： 零知识信任的代码库，spartan rust。
云原生方面：k8s, docker.
数据库方面： TiDB， TiKV， rocksdb。
编译器： llvm。 编译器基本知识。
高并发方面： C++， redis， rocksdb， linux， xv6 。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/git/</guid>
      <description>git clone 🔗clone时的shadow clone 和 deep clone
git submodules
https://git-scm.com/book/en/v2/Git-Tools-Submodules
git clone --recursive https://github.com/rust-lang/rust.git
LibreSSL SSL_read: error:02FFF03C:system library:func(4095):Operation timed out, errno 60 fatal: unable to access error:02FFF036:system library:func(4095):Connection reset by peer 如果开了vpn：export https_proxy=http://127.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/latex/</guid>
      <description>字符编码 🔗ascii码，占一个字节，实际使用了7 bit,128个字符，表示英语够了。 在ascii码的第8位置为0，这个特点深深影响了其他国家和后来的字符编码方式。
欧洲法语é等字符，采用Latin1, 利用acsii码的最高位， 可以表示了。
亚洲国家的文字符号更多，汉字10万加，必须多个字节表示一个符号。 GB2312
unicode 万国码。只是定义了符号的二进制代码，如何区分不同的编码？没有规定二进制如何存放。
utf-8历史， 开发plan 9操作系统的产物，发明了后来广泛使用的字符编码。 utf-8 是一种针对unicode的变长字符编码的实现方式。 使用1-4个字节表示一个字符。 二进制代码第一位是0， 则这个字符只占一个字节。 如果第一位是1，连续有多少个1，表示当前字符占用多少个字节, 后面字节的前两位均以10开头。
例如 严。 unicode = 100111000100101 = 4E25, utf-8=11100100 10111000 10100101 = E4B8A5.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/pku_%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/pku_%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF/</guid>
      <description>软件分析技术（Software Analysis）
哥德尔不完备定理
莱斯定理
数据流分析
过程间分析，指针分析，控制流分析，抽象解释
约束求解，符号执行
数据流分析 🔗活跃变量分析
可达性分析
可用表达式分析
https://xiongyingfei.github.io/SA/2020/main.htm
《编译原理》Aho
《Lecture notes on static analysis》Moller and Schwartzbach
https://cs.au.dk/~amoeller/spa/
南京大学《软件分析》课（B站视频）
《Decision Procedures -- An Algorithmic Point of View》 Daniel Kroening and Ofer Strichman</description>
    </item>
    
  </channel>
</rss>
