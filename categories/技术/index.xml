<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on brettkk</title>
    <link>http://brettkk.github.io/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on brettkk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Jan 2023 11:33:56 +0800</lastBuildDate><atom:link href="http://brettkk.github.io/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rust concurrency</title>
      <link>http://brettkk.github.io/posts/rust/rust_concurrency/</link>
      <pubDate>Thu, 05 Jan 2023 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_concurrency/</guid>
      <description>lock free structure 🔗不用上锁,利用原子操作实现的并发安全的数据结构。 single producer,</description>
    </item>
    
    <item>
      <title>tidb学习</title>
      <link>http://brettkk.github.io/posts/store_db/tidb/</link>
      <pubDate>Thu, 05 Jan 2023 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/tidb/</guid>
      <description>整体架构 🔗二层（1 sql层无状态，处理用户请求和sql运算逻</description>
    </item>
    
    <item>
      <title>etcd 小结</title>
      <link>http://brettkk.github.io/posts/store_db/etcd/</link>
      <pubDate>Mon, 05 Dec 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/etcd/</guid>
      <description>etcd arch 🔗 etcd中的事务隔离级别的实现。 在server的mvc</description>
    </item>
    
    <item>
      <title>环境问题 &#43; 类型系统疑问</title>
      <link>http://brettkk.github.io/posts/rust/rust_problem/</link>
      <pubDate>Mon, 21 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_problem/</guid>
      <description>在vscode下配置rust项目的阅读和debug 🔗rust</description>
    </item>
    
    <item>
      <title>rustc</title>
      <link>http://brettkk.github.io/posts/rust/rustc/</link>
      <pubDate>Tue, 15 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rustc/</guid>
      <description>快速看下rust语言，very fast rust primer 🔗 low-level, no language runtime (like c/c++) focus on memory safety and</description>
    </item>
    
    <item>
      <title>tokio</title>
      <link>http://brettkk.github.io/posts/rust/tokio/</link>
      <pubDate>Tue, 15 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/tokio/</guid>
      <description>忽略 time, process, signal</description>
    </item>
    
    <item>
      <title>《The Rust Programming Language》book</title>
      <link>http://brettkk.github.io/posts/rust/rust-lang/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust-lang/</guid>
      <description>Tour of Rust 以简单的例子串讲，很好入手 《The Rust Programming Language</description>
    </item>
    
    <item>
      <title>linux-tcp</title>
      <link>http://brettkk.github.io/posts/os/tcp/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/tcp/</guid>
      <description>tcp 🔗用寄明信片的方式传送一本书 明文， 乱序，丢包 可靠： 带重传的</description>
    </item>
    
    <item>
      <title>rust-library-core</title>
      <link>http://brettkk.github.io/posts/rust/rust_library_core/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_library_core/</guid>
      <description>rust library core 🔗读一下 rust-lang的源码， core正好是不依赖</description>
    </item>
    
    <item>
      <title>rust-library-std</title>
      <link>http://brettkk.github.io/posts/rust/rust_library_std/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_library_std/</guid>
      <description>HashMap 🔗#[derive(Clone)] pub struct RandomState { k0: u64, k1: u64, } // hashmap 的</description>
    </item>
    
    <item>
      <title>module name and module import path in Go</title>
      <link>http://brettkk.github.io/posts/golang/golang_mod/</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_mod/</guid>
      <description>1. golang管理依赖 🔗 Modules are how Go manages dependencies. 1.1 module and packages 🔗 A module is a collection of packages.</description>
    </item>
    
    <item>
      <title>闭包closure</title>
      <link>http://brettkk.github.io/posts/rust/closure_at_go_c_py_rust/</link>
      <pubDate>Fri, 05 Aug 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/closure_at_go_c_py_rust/</guid>
      <description>why PL need closure? 🔗想一下在函数式编程语言中，宣传函数是一等公民，把函</description>
    </item>
    
    <item>
      <title>golang</title>
      <link>http://brettkk.github.io/posts/golang/golang/</link>
      <pubDate>Sat, 07 May 2022 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang/</guid>
      <description>资料 🔗 目前golang的主要maintainer之一: Russ Cox 个</description>
    </item>
    
    <item>
      <title>linux-base</title>
      <link>http://brettkk.github.io/posts/os/base_os/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/base_os/</guid>
      <description>资料 🔗操作系统：南大 jyy。 http://jyywiki.cn/OS/2022/ MIT 6.S081 https://elixir.bootlin.com/linux/lastest/source Linux 版本 🔗uname -a 查看</description>
    </item>
    
    <item>
      <title>vs code 小结</title>
      <link>http://brettkk.github.io/posts/tools/vs_code/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/vs_code/</guid>
      <description>1 vscode 快捷键 🔗1.1 工作区快捷键 🔗 Cmd + Shift + P -》显示命令面板 Cmd+P</description>
    </item>
    
    <item>
      <title>软件工具集</title>
      <link>http://brettkk.github.io/posts/tools/pkg_tools/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/pkg_tools/</guid>
      <description>tldr (too long didn&#39;t read) . brew install tldr nano 画图 draw.io （加载速度慢） xournal （操作不方便） excalidraw （</description>
    </item>
    
    <item>
      <title>makefile</title>
      <link>http://brettkk.github.io/posts/os/makefile/</link>
      <pubDate>Thu, 05 May 2022 10:13:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/makefile/</guid>
      <description>GNU make is implemented by Richard Stallman and Roland McGrath. Respect. why 🔗大型项目编译过程复杂，需要管理编译</description>
    </item>
    
    <item>
      <title>go embedding</title>
      <link>http://brettkk.github.io/posts/golang/golang_embedding/</link>
      <pubDate>Sat, 05 Mar 2022 08:34:12 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_embedding/</guid>
      <description>why 为什么需要在golang使用embedding 🔗golan</description>
    </item>
    
    <item>
      <title>程序 等价 状态机</title>
      <link>http://brettkk.github.io/posts/os/state_machine/</link>
      <pubDate>Wed, 05 Jan 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/state_machine/</guid>
      <description>软件、程序可以很复杂。但是计算机的本质还是冯诺伊曼定义的：程</description>
    </item>
    
    <item>
      <title>runc</title>
      <link>http://brettkk.github.io/posts/cloud_native/runc/</link>
      <pubDate>Sat, 26 Jun 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/runc/</guid>
      <description>runc 是根据OCI（Open Container Initiative）开放容器标准</description>
    </item>
    
    <item>
      <title>prometheus</title>
      <link>http://brettkk.github.io/posts/cloud_native/prometheus/</link>
      <pubDate>Thu, 24 Jun 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/prometheus/</guid>
      <description>在解决内存与磁盘的读写模式、性能的不匹配问题。有以下两点： 在</description>
    </item>
    
    <item>
      <title>加密相关</title>
      <link>http://brettkk.github.io/posts/os/encrypt/</link>
      <pubDate>Thu, 20 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/encrypt/</guid>
      <description>对称加密与散列 🔗有des, aes 方式， 计算性能好，但密钥的安全依</description>
    </item>
    
    <item>
      <title>go同步编码方式</title>
      <link>http://brettkk.github.io/posts/golang/golang_sync/</link>
      <pubDate>Thu, 06 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_sync/</guid>
      <description>11 🔗 协程切换与线程切换的区别 切换需要切换2个地方：栈和寄存器</description>
    </item>
    
    <item>
      <title>go test</title>
      <link>http://brettkk.github.io/posts/golang/go_test/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_test/</guid>
      <description>工具 🔗 Guru 导航go 代码的编辑器集成工具 变量，函数的声明地点 变量</description>
    </item>
    
    <item>
      <title>go timer</title>
      <link>http://brettkk.github.io/posts/golang/go_timer/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_timer/</guid>
      <description>Go提供了两种定时器，分为：一次性定时器、周期性定时器。 两种</description>
    </item>
    
    <item>
      <title>http, curl, dns</title>
      <link>http://brettkk.github.io/posts/os/http/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/http/</guid>
      <description>http 🔗 http header 常用字段 content-type (如何解析body) application/x-www-form-urlencoded multipart/from-data, 上传文件 application/json, text/plain text/xml, XM</description>
    </item>
    
    <item>
      <title>linux-free</title>
      <link>http://brettkk.github.io/posts/os/free/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/free/</guid>
      <description>free查看内存使用情况，包含已用内存，可用内存，交换内存的</description>
    </item>
    
    <item>
      <title>linux-shell</title>
      <link>http://brettkk.github.io/posts/os/shell-basic/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/shell-basic/</guid>
      <description>单引号，双引号，反引号区别 单引号之间的内容原封不动的输出 双引</description>
    </item>
    
    <item>
      <title>linux-top</title>
      <link>http://brettkk.github.io/posts/os/top/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/top/</guid>
      <description>linux top命令（mac top结果显示有一些区别） Linux下常</description>
    </item>
    
    <item>
      <title>mac安装开发环境</title>
      <link>http://brettkk.github.io/posts/tools/mac_start_dev/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/mac_start_dev/</guid>
      <description>macbook的指令集 uname -a or uname -m 新m1芯片下是arm64 老i</description>
    </item>
    
    <item>
      <title>mysql 小结</title>
      <link>http://brettkk.github.io/posts/store_db/mysql/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/mysql/</guid>
      <description>mysql 起源&amp;amp;基础 🔗 创建表时的存储引擎 🔗 存储引擎-是创建表</description>
    </item>
    
    <item>
      <title>redis 小结</title>
      <link>http://brettkk.github.io/posts/store_db/redis/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/redis/</guid>
      <description>redis 安装、使用 🔗redis 安装 wget https://download.redis.io/releases/redis-6.2.4.tar.gz tar -zvxf redis-6.2.4 mv ~/redis-6.2.4 /usr/local/redis cd /usr/local/redis make 编译 make PREFIX=/usr/local/redis install</description>
    </item>
    
    <item>
      <title>rust unsafe</title>
      <link>http://brettkk.github.io/posts/rust/rust_unsafe/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_unsafe/</guid>
      <description>fn main() { let mut d = String::from(&amp;#34;aaaa&amp;#34;); let d_len = d.len(); { // 去掉 or 不去掉 let mut e = String::wtih_capacity(d_len); unsafe { // 两个</description>
    </item>
    
    <item>
      <title>soot, wala</title>
      <link>http://brettkk.github.io/posts/java/soot_wala/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/java/soot_wala/</guid>
      <description>4中IR Baf 在bytecode上进行的抽象，忽略字节码对于常量</description>
    </item>
    
    <item>
      <title>安全与风控</title>
      <link>http://brettkk.github.io/posts/os/secure_risk/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/secure_risk/</guid>
      <description>漏洞 🔗起因是信任了用户的任意输入。 sql注入 🔗危害： 执行任意</description>
    </item>
    
    <item>
      <title>bug_fix</title>
      <link>http://brettkk.github.io/posts/golang/bug_fix/</link>
      <pubDate>Tue, 04 May 2021 19:10:43 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/bug_fix/</guid>
      <description>一些bug init() 函数滥用 函数功能是查询类的，能不用指针传参数就不</description>
    </item>
    
    <item>
      <title>go lock</title>
      <link>http://brettkk.github.io/posts/golang/go_lock/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_lock/</guid>
      <description>locks 锁 源码包的结构 🔗 sync包 sync.Mutex sync.RWMutex sync.Cond sync.WaitGroup sync.Once sync.Pool 涉及的内容很多 cache line padding</description>
    </item>
    
    <item>
      <title>go内存模型</title>
      <link>http://brettkk.github.io/posts/golang/gomemorymodel/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/gomemorymodel/</guid>
      <description>go的内存模型规定： 在哪些情况下，一个golang中读取的变</description>
    </item>
    
    <item>
      <title>go_toolchain</title>
      <link>http://brettkk.github.io/posts/golang/go_toolchain/</link>
      <pubDate>Sat, 01 May 2021 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_toolchain/</guid>
      <description>an overview of go&#39;s tooling 🔗 table of content installing tooling $ GO111MODULE=on go get golang.org/x/tools/cmd/stresss go get -u, 强制使用网络去更新包和</description>
    </item>
    
    <item>
      <title>java 小结</title>
      <link>http://brettkk.github.io/posts/java/java/</link>
      <pubDate>Fri, 05 Mar 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/java/java/</guid>
      <description>Class文件格式图 1 class文件由十个部分组成 javap</description>
    </item>
    
    <item>
      <title>kubernetes</title>
      <link>http://brettkk.github.io/posts/cloud_native/my-first-post/</link>
      <pubDate>Wed, 03 Mar 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/my-first-post/</guid>
      <description>service mesh 🔗微服务内部有分布式环境下的通用功能：熔断策略、负载均衡</description>
    </item>
    
    <item>
      <title>lsm 小结</title>
      <link>http://brettkk.github.io/posts/store_db/log_structure_tree/</link>
      <pubDate>Wed, 03 Mar 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/log_structure_tree/</guid>
      <description>lsm 基本想法 🔗使用场景， 写多读少，例如存调用链的服务。 应用：l</description>
    </item>
    
  </channel>
</rss>
