<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on brettkk</title>
    <link>http://brettkk.github.io/posts/</link>
    <description>Recent content in Posts on brettkk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Jan 2023 11:33:56 +0800</lastBuildDate><atom:link href="http://brettkk.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rust concurrency</title>
      <link>http://brettkk.github.io/posts/rust/rust_concurrency/</link>
      <pubDate>Thu, 05 Jan 2023 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_concurrency/</guid>
      <description>异步编程 🔗future， async: 定义一个可并发执行的任务； await 触发这</description>
    </item>
    
    <item>
      <title>tidb学习</title>
      <link>http://brettkk.github.io/posts/store_db/tidb/</link>
      <pubDate>Thu, 05 Jan 2023 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/tidb/</guid>
      <description>整体架构 🔗 二层（1 sql层无状态，处理用户请求和sql运算逻</description>
    </item>
    
    <item>
      <title>etcd 小结</title>
      <link>http://brettkk.github.io/posts/store_db/etcd/</link>
      <pubDate>Mon, 05 Dec 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/etcd/</guid>
      <description>etcd使用场景 🔗 共享配置 服务发现 选主 分布式队列 分布式锁 etcd arch</description>
    </item>
    
    <item>
      <title>linux</title>
      <link>http://brettkk.github.io/posts/os/os/</link>
      <pubDate>Mon, 05 Dec 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/os/</guid>
      <description>资料 🔗 操作系统：南大 jyy。 http://jyywiki.cn/OS/2022/ Morris MIT 6.S081 上交： 陈海波 https://elixir.bootlin.com/linux/lastest/source 文件系统 🔗</description>
    </item>
    
    <item>
      <title>rust相关的环境问题 &#43; 类型系统疑问</title>
      <link>http://brettkk.github.io/posts/rust/rust_problem/</link>
      <pubDate>Mon, 21 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_problem/</guid>
      <description>属于名词解释性的文章，知道就是知道，知道是设计者是这么做得而</description>
    </item>
    
    <item>
      <title>rustc</title>
      <link>http://brettkk.github.io/posts/rust/rust%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <pubDate>Tue, 15 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <description>text -&amp;gt; tokens -&amp;gt; ast -&amp;gt; hir -&amp;gt;mir -&amp;gt; llvm ir -&amp;gt; llvm -&amp;gt; 1110 ThinLTO, PGO 快速看下rust语言，ve</description>
    </item>
    
    <item>
      <title>异步运行时tokio</title>
      <link>http://brettkk.github.io/posts/rust/rust%E5%BC%82%E6%AD%A5%E8%BF%90%E8%A1%8C%E6%97%B6tokio/</link>
      <pubDate>Tue, 15 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust%E5%BC%82%E6%AD%A5%E8%BF%90%E8%A1%8C%E6%97%B6tokio/</guid>
      <description>tokio 🔗核心是为了提高系统的吞吐量，而非延迟。 基于os的epol</description>
    </item>
    
    <item>
      <title>linux-tcp，http, curl, dns</title>
      <link>http://brettkk.github.io/posts/os/tcp_udp/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/tcp_udp/</guid>
      <description>udp 🔗光速：30万千米/s 中美具体大约：1.5万千米 光纤网络耗</description>
    </item>
    
    <item>
      <title>rust-library-core</title>
      <link>http://brettkk.github.io/posts/rust/rust_library_core/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_library_core/</guid>
      <description>rust library core 🔗读一下 rust-lang的源码， core正好是不依赖</description>
    </item>
    
    <item>
      <title>rust-library-std</title>
      <link>http://brettkk.github.io/posts/rust/rust_library_std/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_library_std/</guid>
      <description>HashMap 🔗#[derive(Clone)] pub struct RandomState { k0: u64, k1: u64, } // hashmap 的</description>
    </item>
    
    <item>
      <title>rust语言</title>
      <link>http://brettkk.github.io/posts/rust/rust%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust%E8%AF%AD%E8%A8%80/</guid>
      <description>google comprehensive-rust 4days 🔗较短时间4 days入门。 摘要: standard library Option, Result, error handling String Vec HashMap, config hash</description>
    </item>
    
    <item>
      <title>跑步</title>
      <link>http://brettkk.github.io/posts/culture/running/</link>
      <pubDate>Wed, 05 Oct 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/running/</guid>
      <description>Eliud Kipchoge: no human is limited 🔗The Last Milestone: https://www.bilibili.com/video/BV1Ca411n74Z</description>
    </item>
    
    <item>
      <title>区块链技术与应用 -- 学习</title>
      <link>http://brettkk.github.io/posts/tools/block_chain/</link>
      <pubDate>Mon, 05 Sep 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/block_chain/</guid>
      <description>区块链技术与应用 🔗北大肖臻 BTC 🔗proof of work: 做hash函数的</description>
    </item>
    
    <item>
      <title>module name and module import path in Go</title>
      <link>http://brettkk.github.io/posts/golang/golang_mod/</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_mod/</guid>
      <description>1. golang管理依赖 🔗 Modules are how Go manages dependencies. 1.1 module and packages 🔗 A module is a collection of packages.</description>
    </item>
    
    <item>
      <title>闭包closure</title>
      <link>http://brettkk.github.io/posts/rust/closure_at_go_c_py_rust/</link>
      <pubDate>Fri, 05 Aug 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/closure_at_go_c_py_rust/</guid>
      <description>what&#39;s closure in PL? 🔗 在函数式编程语言中，宣传函数是一等公民，把函数作为</description>
    </item>
    
    <item>
      <title>golang</title>
      <link>http://brettkk.github.io/posts/golang/golang/</link>
      <pubDate>Sat, 07 May 2022 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang/</guid>
      <description>资料 🔗 目前golang的主要maintainer之一: Russ Cox 个</description>
    </item>
    
    <item>
      <title>redis 小结</title>
      <link>http://brettkk.github.io/posts/store_db/redis/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/redis/</guid>
      <description>redis 安装使用 🔗redis 安装 wget https://download.redis.io/releases/redis-6.2.4.tar.gz tar -zvxf redis-6.2.4 mv ~/redis-6.2.4 /usr/local/redis cd /usr/local/redis make 编译 make PREFIX=/usr/local/redis install 安</description>
    </item>
    
    <item>
      <title>vs code 小结</title>
      <link>http://brettkk.github.io/posts/tools/vs_code/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/vs_code/</guid>
      <description>1 vscode 快捷键 🔗1.1 工作区快捷键 🔗 Cmd + Shift + P -》显示命令面板 Cmd+P</description>
    </item>
    
    <item>
      <title>软件工具集</title>
      <link>http://brettkk.github.io/posts/tools/pkg_tools/</link>
      <pubDate>Thu, 05 May 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/pkg_tools/</guid>
      <description>画图工具 🔗 draw.io （加载速度慢） xournal （操作不方便） excalidraw （本地local</description>
    </item>
    
    <item>
      <title>历史文化：欧州与宗教</title>
      <link>http://brettkk.github.io/posts/culture/euro/</link>
      <pubDate>Tue, 05 Apr 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/euro/</guid>
      <description>犹太教 基督教 新教 （源于马丁路德） 天主教 基督教的宗派之一，罗马</description>
    </item>
    
    <item>
      <title>go embedding</title>
      <link>http://brettkk.github.io/posts/golang/golang_embedding/</link>
      <pubDate>Sat, 05 Mar 2022 08:34:12 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_embedding/</guid>
      <description>why 为什么需要在golang使用embedding 🔗golan</description>
    </item>
    
    <item>
      <title>计算机程序 等价于 状态机</title>
      <link>http://brettkk.github.io/posts/os/state_machine/</link>
      <pubDate>Wed, 05 Jan 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/state_machine/</guid>
      <description>计算机的本质 🔗软件、程序可以很复杂。但是计算机的本质还是冯诺</description>
    </item>
    
    <item>
      <title>容器 &amp; k8s</title>
      <link>http://brettkk.github.io/posts/os/dockerk8s/</link>
      <pubDate>Sun, 27 Jun 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/dockerk8s/</guid>
      <description>容器 🔗docker架构，镜像，容器，网络，存储。 容器规范OC</description>
    </item>
    
    <item>
      <title>加密相关</title>
      <link>http://brettkk.github.io/posts/math/encrypt/</link>
      <pubDate>Thu, 20 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/encrypt/</guid>
      <description>对称加密与散列 🔗有des, aes 方式， 计算性能好，但密钥的安全依</description>
    </item>
    
    <item>
      <title>纠错码</title>
      <link>http://brettkk.github.io/posts/math/d%E7%BA%A0%E9%94%99%E7%A0%81/</link>
      <pubDate>Thu, 20 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/d%E7%BA%A0%E9%94%99%E7%A0%81/</guid>
      <description>读心术的小游戏 🔗 信息论 🔗 达到不失真的信源压缩编码的极限（最低</description>
    </item>
    
    <item>
      <title>go同步编码方式</title>
      <link>http://brettkk.github.io/posts/golang/golang_sync/</link>
      <pubDate>Thu, 06 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_sync/</guid>
      <description>11 🔗 协程切换与线程切换的区别 切换需要切换2个地方：栈和寄存器</description>
    </item>
    
    <item>
      <title>go test</title>
      <link>http://brettkk.github.io/posts/golang/go_test/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_test/</guid>
      <description>工具 🔗 Guru 导航go 代码的编辑器集成工具 变量，函数的声明地点 变量</description>
    </item>
    
    <item>
      <title>go timer</title>
      <link>http://brettkk.github.io/posts/golang/go_timer/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_timer/</guid>
      <description>Go提供了两种定时器，分为：一次性定时器、周期性定时器。 两种</description>
    </item>
    
    <item>
      <title>linux shell 工具命令</title>
      <link>http://brettkk.github.io/posts/os/shell/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/shell/</guid>
      <description>配置shell文件 🔗 /etc/profile 为系统中每个用户设置环境信息，只在用户</description>
    </item>
    
    <item>
      <title>mac安装开发环境</title>
      <link>http://brettkk.github.io/posts/tools/mac_start_dev/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/mac_start_dev/</guid>
      <description>新电脑构建开发环境 🔗 iterm2 brew zsh, ohmyzsh golang, rust vscode hugo github direnv multipass 虚拟机 字体 fira cod</description>
    </item>
    
    <item>
      <title>mysql 小结</title>
      <link>http://brettkk.github.io/posts/store_db/mysql/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/mysql/</guid>
      <description>mysql 起源&amp;amp;基础 🔗 创建表时的存储引擎 🔗 存储引擎-是创建表</description>
    </item>
    
    <item>
      <title>python</title>
      <link>http://brettkk.github.io/posts/tools/python/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/python/</guid>
      <description>python 解释器 🔗cpython， pypy https://github.com/makeyourownneuralnetwork Colab服务： colab.research.google.com 数据分析包：</description>
    </item>
    
    <item>
      <title>rust unsafe</title>
      <link>http://brettkk.github.io/posts/rust/rust_unsafe/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_unsafe/</guid>
      <description>fn main() { let mut d = String::from(&amp;#34;aaaa&amp;#34;); let d_len = d.len(); { // 去掉 or 不去掉 let mut e = String::wtih_capacity(d_len); unsafe { // 两个</description>
    </item>
    
    <item>
      <title>电影对白</title>
      <link>http://brettkk.github.io/posts/francais/common_sense/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/common_sense/</guid>
      <description>how i meet your mother 🔗ok, yes, it’s a mistake. I know it’s a mistake. But there are certain things in</description>
    </item>
    
    <item>
      <title>bug_fix</title>
      <link>http://brettkk.github.io/posts/golang/bug_fix/</link>
      <pubDate>Tue, 04 May 2021 19:10:43 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/bug_fix/</guid>
      <description>一些bug init() 函数滥用 函数功能是查询类的，能不用指针传参数就不</description>
    </item>
    
    <item>
      <title>Alphabet Français</title>
      <link>http://brettkk.github.io/posts/francais/fran%C3%A7ais/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/fran%C3%A7ais/</guid>
      <description>三板斧：DELF, DALF, TCF, TEF mac下输入快捷键 🔗法语特殊符输入方</description>
    </item>
    
    <item>
      <title>go lock</title>
      <link>http://brettkk.github.io/posts/golang/go_lock/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_lock/</guid>
      <description>golang源码包的结构 🔗 sync包：sync.Mutex，</description>
    </item>
    
    <item>
      <title>go内存模型</title>
      <link>http://brettkk.github.io/posts/golang/gomemorymodel/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/gomemorymodel/</guid>
      <description>go的内存模型规定： 在哪些情况下，一个golang中读取的变</description>
    </item>
    
    <item>
      <title>go_toolchain</title>
      <link>http://brettkk.github.io/posts/golang/go_toolchain/</link>
      <pubDate>Sat, 01 May 2021 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_toolchain/</guid>
      <description>an overview of go&#39;s tooling 🔗 table of content installing tooling $ GO111MODULE=on go get golang.org/x/tools/cmd/stresss go get -u, 强制使用网络去更新包和</description>
    </item>
    
    <item>
      <title>中国历史的时间表</title>
      <link>http://brettkk.github.io/posts/culture/chinese_dynasty/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/culture/chinese_dynasty/</guid>
      <description>历史的编年体 🔗夏商周秦西东汉 三国两晋南北朝 隋唐五代北南宋 下接</description>
    </item>
    
    <item>
      <title>字符串匹配KMP</title>
      <link>http://brettkk.github.io/posts/leetcode/string/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/string/</guid>
      <description>字符串匹配算法 🔗为了加速字符串的匹配 KMP： input source string</description>
    </item>
    
    <item>
      <title>等额本息</title>
      <link>http://brettkk.github.io/posts/math/loan/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/loan/</guid>
      <description>涉及的变量 🔗 本金M 期数N 利率R 等额本息X 公式推导 🔗当N=1时</description>
    </item>
    
    <item>
      <title>java 小结</title>
      <link>http://brettkk.github.io/posts/tools/java/</link>
      <pubDate>Fri, 05 Mar 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/java/</guid>
      <description>java字节码格式 🔗Class文件格式图 javap查看字节码</description>
    </item>
    
    <item>
      <title>lsm 小结</title>
      <link>http://brettkk.github.io/posts/store_db/log_structure_tree/</link>
      <pubDate>Wed, 03 Mar 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/log_structure_tree/</guid>
      <description>lsm 基本想法 🔗使用场景， 写多读少，例如存调用链的服务。 应用：l</description>
    </item>
    
    <item>
      <title>代数 algebra</title>
      <link>http://brettkk.github.io/posts/math/algeb/</link>
      <pubDate>Fri, 05 Feb 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/algeb/</guid>
      <description>高等代数 🔗3Blue1Brown的系列视频 线性代数的本质 矩阵</description>
    </item>
    
    <item>
      <title>计算复杂度--P, NP, NPC, NP hard</title>
      <link>http://brettkk.github.io/posts/math/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Fri, 18 Sep 2020 09:13:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/golang/static-analysis-golang/origin_parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/static-analysis-golang/origin_parser/</guid>
      <description>go compiler 🔗 go compiler的实现入口在src/cmd/compile
cmd/compile/internal/gc.Main 初始化ssa配置，cmd/compile/internal/gc.initssaconfig cmd/compile/internal/gc.funccompile 优化中间代码的过程在cmd/compile/internal/ssa.Compile cmd/internal/obj
golang compiler
go gccgo closed project tulgo open source llgo GopherJS TARDIS Go ssa --&amp;gt; llgo --&amp;gt; llvm module --&amp;gt; llgo-build --&amp;gt; executable github.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/other/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/other/</guid>
      <description>约瑟夫环 🔗 1-N个人，形成一个圈，从编号为1开始报数1，数到M的人x出列，x之后的人再次从1开始喊 直到最后一个人，求这个人的编号
数组 🔗遍历数组，数到m的位置标记为-1， 直到数组中仅剩一个非-1的元素，返回元素的位置
环形链表 🔗不做标记，直接从环形链表中删除。
type Node struct{ int num, next Node, } func createCircleLink(int n) Node{ head := Node{num: 1} cur = head for i := 2; i &amp;lt; n; i++ { tmp := Node{num: i} cur.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/skiplist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/skiplist/</guid>
      <description> type Element struct { score float64 value interface{} forward []*Element } type SkipList struct { header *Element len int level int } </description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/math/draft_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/draft_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</guid>
      <description>数学分析 🔗1 极限，连续 🔗连续的定义 🔗初等函数在定义域内都是连续的。 一般讨论高等函数，如分段函数。
极限的定义 🔗极限的求法 🔗无穷小 $$ lim $$
，无穷大
洛必达法则求极限
2 导数（微商），微分 🔗导数叫微商，是极限。
导数的定义。 🔗导数的几何意义。 🔗斜率
求导的方法 🔗复合函数的求导
隐函数的求导。
导数的应用 🔗单调性，求极值，凹凸性（二阶导数）
3 不定积分，定积分 🔗不定积分 🔗不定积分： 求函数f的全部原函数。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/rust/rust_c&#43;&#43;/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_c&#43;&#43;/</guid>
      <description>变量赋值的两种语义 move vs copy 🔗c++向左，rust向右。
rust中的move和copy 🔗栈上的值的赋值默认是copy，堆上是move。 均可以改为clone， borrow。
C++中的move和copy 🔗值类型 和 引用类型
值分为 左值 和 右值：只能在等式右边出现（常量，临时变量a+2） 有地址的变量是左值。没有地址的字面值，临时值是右值。 引用分为 左值引用 和 右值引用。 左值引用和右值引用 类似指针。 什么是左值引用，右值引用?
引用本质是别名。通过引用修改变量的值。传参时避免拷贝，原理与指针类似。
有指针了，为啥还需要引用？ 降低指针的使用。指针+ 左右值引用，理解成本变大。
引用是变量的别名。因为右值没有地址，没法被修改。所以左值引用无法指向右值。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/rust/startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/startup/</guid>
      <description>标准库 🔗字符在计算机内部时如何表示的？ Unicode兼容了ASCII包含全世界的所有字符，常用UTF-8编码，变长1到4个字节。
字符类型char占4个字节。 rust中字符是unicode编码占4个字节。
std::mem::size_of_val(&amp;amp;&amp;#39;中&amp;#39;） // 4 std::mem::size_of_val(&amp;#34;中&amp;#34;.to_string().as_str()) // 3 。 let a_len = std::mem::size_of_val(&amp;#34;中&amp;#34;); println!(&amp;#34;a_len={:?}&amp;#34;, a_len); // 3 字符串不能想数组那样的索引访问？ 第i个字符 vs 第i个字节 for c in &amp;quot;1234&amp;quot;.chars() {...} vs for c in &amp;quot;1234&amp;quot;.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/todo_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/todo_list/</guid>
      <description>要了几天饱饭就不记得西北风啥味了
计算机软件 = 存储（tidb，tikv，rocksdb）， 计算（zero knoledge）， 网络（tokio） 工作内容相关方面： 规则引擎grule[11.1]，
工作流引擎（提一下就行）
向量存储Faiss。
密码方面： 零知识信任的代码库，spartan rust。
云原生方面：k8s, docker.
数据库方面： TiDB， TiKV， rocksdb。
编译器： llvm。 编译器基本知识。
高并发方面： C++， redis， rocksdb， linux， xv6 。</description>
    </item>
    
  </channel>
</rss>
