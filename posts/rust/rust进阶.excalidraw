{
  "type": "excalidraw",
  "version": 2,
  "source": "http://localhost:3000",
  "elements": [
    {
      "type": "rectangle",
      "version": 106,
      "versionNonce": 1818582328,
      "isDeleted": false,
      "id": "fq6SADHs3k1qSLyb33ATU",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 484.03125,
      "y": 145.14453125,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 587.515625,
      "height": 311.6875,
      "seed": 1359279928,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1662344659791,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 757,
      "versionNonce": 308522808,
      "isDeleted": false,
      "id": "veDPurjENBNFQOkB1AH_n",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 497,
      "y": 155,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 553,
      "height": 292,
      "seed": 1738997320,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1662344677199,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "DST， unsized。\n    在编译期不知道类型的大小，到运行时知道。\n    底层数据放在堆上，在栈上存放一个引用类型（sized）。\n    \n   编译器需要知道每个类型的值占用多少空间。\n    同时，该类型下的所有值必须使用相同大小的空间。\n    \n    所以如果rust语法允许直接使用DST类型的变量，那么无法保证\n    每个DST类型占据相同大小的空间。\n    给DST的引用类型以固定大小的类型。（堆上地址+长度等）\n    间接使用DST， &str,  &[T],  &dyn Trait,  Box<dyn Trait>",
      "baseline": 286,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "DST， unsized。\n    在编译期不知道类型的大小，到运行时知道。\n    底层数据放在堆上，在栈上存放一个引用类型（sized）。\n    \n   编译器需要知道每个类型的值占用多少空间。\n    同时，该类型下的所有值必须使用相同大小的空间。\n    \n    所以如果rust语法允许直接使用DST类型的变量，那么无法保证\n    每个DST类型占据相同大小的空间。\n    给DST的引用类型以固定大小的类型。（堆上地址+长度等）\n    间接使用DST， &str,  &[T],  &dyn Trait,  Box<dyn Trait>"
    },
    {
      "type": "rectangle",
      "version": 156,
      "versionNonce": 1695407160,
      "isDeleted": false,
      "id": "JEXQeWJmURl8WI9P_mGBM",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 484.109375,
      "y": 479.92578125,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 584.8984375,
      "height": 511.10546874999994,
      "seed": 2098475592,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1662367849891,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 662,
      "versionNonce": 867676216,
      "isDeleted": false,
      "id": "Ki_xv7TKkl_MDWpYQU7rQ",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 505,
      "y": 490.5,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 517,
      "height": 557,
      "seed": 221141560,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1662368795237,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "智能指针\n    Box分配堆上的对象。\n        Box::leak 生成运行时'static 对象。\n    Deref特征。\n    Drop特征。\n    \n   共享所有权时：\n    std::rc::Rc::new() ， Rc::clone() 没有深度拷贝数据，\n        不可变引用，仅增加引用计数，不能修改指向的数据。\n    std::sync::Arc\n\n    拥有不可变引用时修改数据，\n        Cell，RefCell 内部可变性，利用unsafe。\n        Cell<T> 适用于T实现了Copy的情况。\n    \n    RefCell \n        \n\n    \n    \n    ",
      "baseline": 551,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "智能指针\n    Box分配堆上的对象。\n        Box::leak 生成运行时'static 对象。\n    Deref特征。\n    Drop特征。\n    \n   共享所有权时：\n    std::rc::Rc::new() ， Rc::clone() 没有深度拷贝数据，\n        不可变引用，仅增加引用计数，不能修改指向的数据。\n    std::sync::Arc\n\n    拥有不可变引用时修改数据，\n        Cell，RefCell 内部可变性，利用unsafe。\n        Cell<T> 适用于T实现了Copy的情况。\n    \n    RefCell \n        \n\n    \n    \n    "
    },
    {
      "id": "7YzsDSX1LvwLuxFp9knNp",
      "type": "rectangle",
      "x": 485.5390625,
      "y": 42.070312500000014,
      "width": 585.7265625,
      "height": 92.14453124999999,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1165873720,
      "version": 361,
      "versionNonce": 1808685112,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662514170238,
      "link": null,
      "locked": false
    },
    {
      "id": "x9e57jZC_RDylUq6nNf9L",
      "type": "text",
      "x": 495.53515625,
      "y": 52.59375,
      "width": 407,
      "height": 80,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 427201608,
      "version": 260,
      "versionNonce": 232241736,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662514173628,
      "link": null,
      "locked": false,
      "text": "全局变量\n    编译期初始化的全局变量。 const ， static。 \n    运行期初始化的全局变量。lazy_static, Box::leak()",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 74,
      "containerId": null,
      "originalText": "全局变量\n    编译期初始化的全局变量。 const ， static。 \n    运行期初始化的全局变量。lazy_static, Box::leak()"
    },
    {
      "id": "MBAUafBYEhJCtUdCyHBgU",
      "type": "rectangle",
      "x": 483.04296875,
      "y": 1002.72265625,
      "width": 584.63671875,
      "height": 558.4296874999999,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 610385976,
      "version": 243,
      "versionNonce": 760545608,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662518614647,
      "link": null,
      "locked": false
    },
    {
      "id": "KQ7XWzceIaJYdNUFKUwXR",
      "type": "text",
      "x": 499.5,
      "y": 1017,
      "width": 541,
      "height": 477,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1324748600,
      "version": 881,
      "versionNonce": 618131768,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662518997878,
      "link": null,
      "locked": false,
      "text": "unsafe rust:\n    对裸指针进行解引用。\n        引用&T 与 裸指针*const T, *mut T\n        基于引用，内存地址usize，智能指针创建裸指针。\n    调用unsafe函数。\n    FFI\n        在rust中调c的库。extern \"C\" { fn abs(input: i32) -> i32; } 指明ABI。\n        在其他语言中调用rust。\n        rust-bindgen库用于rust中访问C代码。cbindgen。\n        与c++交互用cxx。\n    实用工具\n           Miri。 rustup component add miri。 cargo miri， cargo miri test。\n           Clippy。\n            fuzz testing。 \n    访问，修改可变的静态变量。\n        \n    实现一个unsafe特征。\n    访问union中的字段。",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 472,
      "containerId": null,
      "originalText": "unsafe rust:\n    对裸指针进行解引用。\n        引用&T 与 裸指针*const T, *mut T\n        基于引用，内存地址usize，智能指针创建裸指针。\n    调用unsafe函数。\n    FFI\n        在rust中调c的库。extern \"C\" { fn abs(input: i32) -> i32; } 指明ABI。\n        在其他语言中调用rust。\n        rust-bindgen库用于rust中访问C代码。cbindgen。\n        与c++交互用cxx。\n    实用工具\n           Miri。 rustup component add miri。 cargo miri， cargo miri test。\n           Clippy。\n            fuzz testing。 \n    访问，修改可变的静态变量。\n        \n    实现一个unsafe特征。\n    访问union中的字段。"
    },
    {
      "id": "iKZ87YfP2QW7f2zAZqek6",
      "type": "rectangle",
      "x": 481.97265625,
      "y": 1591.51953125,
      "width": 585.44921875,
      "height": 464.10546875,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1748306488,
      "version": 122,
      "versionNonce": 1937772616,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662519045998,
      "link": null,
      "locked": false
    },
    {
      "id": "RmwpbpLHWg5T-AZdsbXhx",
      "type": "text",
      "x": 488.5,
      "y": 1598,
      "width": 549,
      "height": 371,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 528625976,
      "version": 454,
      "versionNonce": 464588600,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662526393758,
      "link": null,
      "locked": false,
      "text": "宏编程。\n    宏和函数的区别。\n        \n    声明式宏。\n       vec![1, 2, 3] 模式匹配和解析。\n    过程宏。\n        派生宏。#[derive(Debug)] 为结构体生成Debug特征需要的代码。\n        #[proc_macro_derive(xx)]        \n\n        类属性宏。#[proc_macro_attribute]\n\n        类函数宏。#[proc_macro]\n    自定义宏。宏所在的包名xx_derive。\n        ",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 366,
      "containerId": null,
      "originalText": "宏编程。\n    宏和函数的区别。\n        \n    声明式宏。\n       vec![1, 2, 3] 模式匹配和解析。\n    过程宏。\n        派生宏。#[derive(Debug)] 为结构体生成Debug特征需要的代码。\n        #[proc_macro_derive(xx)]        \n\n        类属性宏。#[proc_macro_attribute]\n\n        类函数宏。#[proc_macro]\n    自定义宏。宏所在的包名xx_derive。\n        "
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}