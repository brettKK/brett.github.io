{
  "type": "excalidraw",
  "version": 2,
  "source": "http://localhost:3000",
  "elements": [
    {
      "type": "rectangle",
      "version": 107,
      "versionNonce": 1164245611,
      "isDeleted": false,
      "id": "hUPzWcEpk3O0dcjIay51C",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 490.2578125,
      "y": 135.84375,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 307,
      "height": 44,
      "seed": 1516088286,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [
        {
          "type": "text",
          "id": "IvKIfkZaJVFksPT-GS5Ql"
        }
      ],
      "updated": 1662128708923,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 97,
      "versionNonce": 1800304069,
      "isDeleted": false,
      "id": "IvKIfkZaJVFksPT-GS5Ql",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 495.2578125,
      "y": 145.34375,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 297,
      "height": 25,
      "seed": 1380923074,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1662128708923,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 4,
      "text": "rust",
      "baseline": 18,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "hUPzWcEpk3O0dcjIay51C",
      "originalText": "rust"
    },
    {
      "type": "rectangle",
      "version": 52,
      "versionNonce": 256931083,
      "isDeleted": false,
      "id": "PEZKr9kL8yu6zIHCta0aD",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 488.73828125,
      "y": 195.0546875,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 456.55859375000006,
      "height": 249.2578125,
      "seed": 2047478302,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1662128708923,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 444,
      "versionNonce": 167893099,
      "isDeleted": false,
      "id": "_eZshloWTUahEV7oK5MrT",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 518,
      "y": 203.5,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 420,
      "height": 265,
      "seed": 496605954,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1662132271766,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "question1: too big and hard to learn ?\n    ans: start small, grow gradually.\n\n建立信心去学习，相信自己，前面有星辰大海。\n一些方法去学习rust的核心，慢慢扩大范围。\n核心： traits， safe access to data（所有权，借用）\n    start with structs, vectors, iteration, Result and Option.\n    everything else can come next\n    \n",
      "baseline": 260,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "question1: too big and hard to learn ?\n    ans: start small, grow gradually.\n\n建立信心去学习，相信自己，前面有星辰大海。\n一些方法去学习rust的核心，慢慢扩大范围。\n核心： traits， safe access to data（所有权，借用）\n    start with structs, vectors, iteration, Result and Option.\n    everything else can come next\n    \n"
    },
    {
      "id": "vCe0-HwMx_A5L26OYjamd",
      "type": "rectangle",
      "x": 489.337890625,
      "y": 461.306640625,
      "width": 703.0703124999999,
      "height": 414.63671875,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 601293419,
      "version": 257,
      "versionNonce": 255040427,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662128708924,
      "link": null,
      "locked": false
    },
    {
      "id": "DlWJqUhaUDUEAvOCy2I-M",
      "type": "text",
      "x": 502.763671875,
      "y": 467.728515625,
      "width": 669,
      "height": 371,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 249011141,
      "version": 874,
      "versionNonce": 1680181381,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662128708924,
      "link": null,
      "locked": false,
      "text": "rust by pratice\n    本地web浏览, 使用《mdbook》 cargo install mdbook && cd rust-by-practice && mdbook serve\n    《rust by example》\n    \n    开源项目：ripgrep\n                        text editor. https://www.philippflenker.com/hecto\n                        Ncspot.      terminal client.\n                        Command line rust.    kyclark/command-line-rust\n                        pngme book.  build your text editor with rust.\n                        writing an os in rust.   os.phil-opp.com/zh-CN/     github.com/phil-opp/blog-os\n                        build own git, docker, sqlite, redis. codecrafters.io\n                        mini-redis, an incomplete redis client and server.    github.com/tokio-rs/mini-redis\n                           \n    ",
      "fontSize": 19.992993273542602,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 366,
      "containerId": null,
      "originalText": "rust by pratice\n    本地web浏览, 使用《mdbook》 cargo install mdbook && cd rust-by-practice && mdbook serve\n    《rust by example》\n    \n    开源项目：ripgrep\n                        text editor. https://www.philippflenker.com/hecto\n                        Ncspot.      terminal client.\n                        Command line rust.    kyclark/command-line-rust\n                        pngme book.  build your text editor with rust.\n                        writing an os in rust.   os.phil-opp.com/zh-CN/     github.com/phil-opp/blog-os\n                        build own git, docker, sqlite, redis. codecrafters.io\n                        mini-redis, an incomplete redis client and server.    github.com/tokio-rs/mini-redis\n                           \n    "
    },
    {
      "id": "zCpqMSDsqnMFeIk2FwYf1",
      "type": "rectangle",
      "x": 955.302734375,
      "y": 193.841796875,
      "width": 465.01171875,
      "height": 252.6875,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 204359851,
      "version": 82,
      "versionNonce": 20508235,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662128708924,
      "link": null,
      "locked": false
    },
    {
      "id": "D7RKnu_v3iiXEYWMpgrIz",
      "type": "text",
      "x": 968.763671875,
      "y": 197.728515625,
      "width": 363,
      "height": 212,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 592389445,
      "version": 374,
      "versionNonce": 2110533605,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662128708924,
      "link": null,
      "locked": false,
      "text": "开发工具：\n    vs-code。 插件rust-analyzer,  Even Better TOML, \n        Error Lens, One Dark Pro, CodeLLDB, Debugger.\n  \n cargo check 快速check编译问题。\n官方英文原版+ async book + nomicon\n \n ",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 207,
      "containerId": null,
      "originalText": "开发工具：\n    vs-code。 插件rust-analyzer,  Even Better TOML, \n        Error Lens, One Dark Pro, CodeLLDB, Debugger.\n  \n cargo check 快速check编译问题。\n官方英文原版+ async book + nomicon\n \n "
    },
    {
      "id": "af9b-MP6y_v1r9AqOAr8D",
      "type": "rectangle",
      "x": 489.005859375,
      "y": 887.794921875,
      "width": 706.19921875,
      "height": 1617.1796874999998,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 863718731,
      "version": 501,
      "versionNonce": 1664393451,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662279366322,
      "link": null,
      "locked": false
    },
    {
      "id": "1-SEYq5nigJNdgIoU46qi",
      "type": "text",
      "x": 499.544921875,
      "y": 893.267578125,
      "width": 688,
      "height": 1590,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 246278053,
      "version": 2681,
      "versionNonce": 2002716619,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662279389957,
      "link": null,
      "locked": false,
      "text": "字符类型char\n    rust中字符是unicode编码占4个字节。 字符类型占4个字节。\n    std::mem::size_of_val(&'中'） // 4 。&'a' 为什么与golang的中文字符的空间占用不同？\n    std::mem::size_of_val(\"中\".to_string().as_str()) // 3 。\n单元类型()\n \n语句statement 和 表达式expression（总有返回值）\n永不返回的发散函数。 fn dead_end() -> ! { panic!(\"fck\"); }\n \nString 与 &str。 OsString与OsStr。 CsString与CsStr\nString转为&str，Deref特征。\n字符串不能想数组那样的索引访问？因为uft-8的字符编码。\n字符串的操作。\nString和&str在内存中不同的存储方式。\n       \n  复合类型\n        元祖，结构体，枚举，数组。\n        \n模式匹配 match, if let, while let。\n \n方法。 \n impl A {\n    fn f(&self){\n    }\n}       //  &self 等价于self: &Self。   Self == A。（实例self： &类型Self）\n\n泛型，特征，特征对象。\n\n集合类型。 vector， hashmap。\n\n类型转换。\n    as 转换。\n            300_i32 as i8 == 44\n            内存地址转指针。as_mut_ptr().\n    tryinto转换, use std::convert::TryInto。\n    as， tryinto 只能运用在数值类型上。\n    通用转换。Transmutes。\n        std::mem::transmute<T, U> 将T转为U类型。\n        std::mem::transmute_copy<T, U>\n\n错误处理。 unwrap(), 成功则返回值，失败则panic。 expect() 类似。\n    错误传播。 ` ? ` 遇到错误则返回错误，成功则将Ok中的值取出来。\n    Result通过？返回错误， Option通过？返回Option::None\n    \n包和模块。\n\n注释和文档。\n    文档注释。 当行文档注释///        多行文档注释 /**\n                                                                                              */\n        cargo doc 生成在target/doc下html。 cargo doc --open\n    包和模块注释。\n        需要添加到包和模块的最上方。//! \n        /*!\n            */\n文档测试。\n格式化输出。\n    {} 适用于 实现了 std::fmt::Display类型\n    {:?} 适用于 实现了std::fmt::Debug类型\n\n    vector类型实现了Debug, 为实现Display.",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 1585,
      "containerId": null,
      "originalText": "字符类型char\n    rust中字符是unicode编码占4个字节。 字符类型占4个字节。\n    std::mem::size_of_val(&'中'） // 4 。&'a' 为什么与golang的中文字符的空间占用不同？\n    std::mem::size_of_val(\"中\".to_string().as_str()) // 3 。\n单元类型()\n \n语句statement 和 表达式expression（总有返回值）\n永不返回的发散函数。 fn dead_end() -> ! { panic!(\"fck\"); }\n \nString 与 &str。 OsString与OsStr。 CsString与CsStr\nString转为&str，Deref特征。\n字符串不能想数组那样的索引访问？因为uft-8的字符编码。\n字符串的操作。\nString和&str在内存中不同的存储方式。\n       \n  复合类型\n        元祖，结构体，枚举，数组。\n        \n模式匹配 match, if let, while let。\n \n方法。 \n impl A {\n    fn f(&self){\n    }\n}       //  &self 等价于self: &Self。   Self == A。（实例self： &类型Self）\n\n泛型，特征，特征对象。\n\n集合类型。 vector， hashmap。\n\n类型转换。\n    as 转换。\n            300_i32 as i8 == 44\n            内存地址转指针。as_mut_ptr().\n    tryinto转换, use std::convert::TryInto。\n    as， tryinto 只能运用在数值类型上。\n    通用转换。Transmutes。\n        std::mem::transmute<T, U> 将T转为U类型。\n        std::mem::transmute_copy<T, U>\n\n错误处理。 unwrap(), 成功则返回值，失败则panic。 expect() 类似。\n    错误传播。 ` ? ` 遇到错误则返回错误，成功则将Ok中的值取出来。\n    Result通过？返回错误， Option通过？返回Option::None\n    \n包和模块。\n\n注释和文档。\n    文档注释。 当行文档注释///        多行文档注释 /**\n                                                                                              */\n        cargo doc 生成在target/doc下html。 cargo doc --open\n    包和模块注释。\n        需要添加到包和模块的最上方。//! \n        /*!\n            */\n文档测试。\n格式化输出。\n    {} 适用于 实现了 std::fmt::Display类型\n    {:?} 适用于 实现了std::fmt::Debug类型\n\n    vector类型实现了Debug, 为实现Display."
    },
    {
      "id": "R-x3EnlM3K0AVjRen8mqh",
      "type": "rectangle",
      "x": 490.427734375,
      "y": 2514.474609375,
      "width": 705.05078125,
      "height": 1043.24609375,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1934741771,
      "version": 138,
      "versionNonce": 242455755,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662338571876,
      "link": null,
      "locked": false
    },
    {
      "id": "9qMIH_zMEWBCEwnuf_rYG",
      "type": "text",
      "x": 500.763671875,
      "y": 2519.728515625,
      "width": 683,
      "height": 504,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1290623941,
      "version": 790,
      "versionNonce": 1625619755,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662337621875,
      "link": null,
      "locked": false,
      "text": "生命周期。 即引用的有效作用域。\n\n 函数式编程。 闭包，迭代器。\n    函数作为函数的参数，作为函数的返回值。\n    \n    三种Fn特征：Fn, FnMut, FnOnce。 \n        闭包实现哪种Fn特征，取决于如何使用被捕获的变量，\n        与move无关。\n    闭包作为函数的返回值。\n        直接使用Fn特征，有size unkown in compile-time。 所以需要使用特征对象类型。\n        Box<dyn Fn()->i32>\n\n    迭代器。\n        for循环与迭代器. IntoIterator特征的ino_iter()方法。\n        let arr = [1, 2, 3];\n        for v in arr {\n            println!(\"{}\", v);\n        }\n    ",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 498,
      "containerId": null,
      "originalText": "生命周期。 即引用的有效作用域。\n\n 函数式编程。 闭包，迭代器。\n    函数作为函数的参数，作为函数的返回值。\n    \n    三种Fn特征：Fn, FnMut, FnOnce。 \n        闭包实现哪种Fn特征，取决于如何使用被捕获的变量，\n        与move无关。\n    闭包作为函数的返回值。\n        直接使用Fn特征，有size unkown in compile-time。 所以需要使用特征对象类型。\n        Box<dyn Fn()->i32>\n\n    迭代器。\n        for循环与迭代器. IntoIterator特征的ino_iter()方法。\n        let arr = [1, 2, 3];\n        for v in arr {\n            println!(\"{}\", v);\n        }\n    "
    },
    {
      "id": "4twwYihpRJFlUY5SfZnHr",
      "type": "rectangle",
      "x": 712.388671875,
      "y": 2891.923828125,
      "width": 315.1210937500001,
      "height": 149.68359375,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 457758309,
      "version": 484,
      "versionNonce": 320019557,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662339410269,
      "link": null,
      "locked": false
    },
    {
      "id": "6tj_AtAssHTbvKbKdpBwu",
      "type": "text",
      "x": 725.810546875,
      "y": 2897.646484375,
      "width": 307,
      "height": 133,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 995812421,
      "version": 241,
      "versionNonce": 1566224619,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662339403609,
      "link": null,
      "locked": false,
      "text": "let arr = [1,2,3];\nfor v in arr.into_iter() {\n    println!(\"{}\", v);\n}\nprintln!(\"{:?}\", arr) // 没有所有权问题？",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 127,
      "containerId": null,
      "originalText": "let arr = [1,2,3];\nfor v in arr.into_iter() {\n    println!(\"{}\", v);\n}\nprintln!(\"{:?}\", arr) // 没有所有权问题？"
    },
    {
      "id": "jMOsK0p-xZmHrcdcrgCd_",
      "type": "rectangle",
      "x": 538.841796875,
      "y": 3051.521484375,
      "width": 329.68749999999994,
      "height": 163.77734375,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 853216901,
      "version": 327,
      "versionNonce": 1503426283,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662338054202,
      "link": null,
      "locked": false
    },
    {
      "id": "KCY-fYmV-Ny2mP67ZAUsk",
      "type": "text",
      "x": 552.404296875,
      "y": 3065.849609375,
      "width": 301,
      "height": 133,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1701772389,
      "version": 394,
      "versionNonce": 1975189829,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662338054202,
      "link": null,
      "locked": false,
      "text": "pub trait Iterator{\n    type Item;\n    fn next(&mut self) -> Option<Self::Item>;\n    //...\n}",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 127,
      "containerId": null,
      "originalText": "pub trait Iterator{\n    type Item;\n    fn next(&mut self) -> Option<Self::Item>;\n    //...\n}"
    },
    {
      "id": "0Kv7aww3SFG9CnD3HKwR9",
      "type": "text",
      "x": 534.763671875,
      "y": 3235.728515625,
      "width": 659,
      "height": 292,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 58234405,
      "version": 596,
      "versionNonce": 2103189483,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1662339755483,
      "link": null,
      "locked": false,
      "text": "into_iter(),  iter(),  iter_mut() 。 into_xxx() 的调用都会拿走所有权。\n\nIterator 迭代器特征。 \nIntoIterator：某个类型实现了该特征，可调into_iter(), iter()等方法变为迭代器。\n\n消费型适配器 v_iter.sum()， collect()\n迭代型适配器 \n    map(), filter()，enumerate()。 实现了链式调用，原因是每次都返回新的迭代器\n迭代型是惰性的，需要消费型适配器收尾转换成具体的值。\n\n",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 286,
      "containerId": null,
      "originalText": "into_iter(),  iter(),  iter_mut() 。 into_xxx() 的调用都会拿走所有权。\n\nIterator 迭代器特征。 \nIntoIterator：某个类型实现了该特征，可调into_iter(), iter()等方法变为迭代器。\n\n消费型适配器 v_iter.sum()， collect()\n迭代型适配器 \n    map(), filter()，enumerate()。 实现了链式调用，原因是每次都返回新的迭代器\n迭代型是惰性的，需要消费型适配器收尾转换成具体的值。\n\n"
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}