{"root":{"data":{"id":"cknfdfc3v4w0","created":1654962862678,"text":"rust","note":"reference: https://doc.rust-lang.org/stable\n"},"children":[{"data":{"id":"cknfdmfo77k0","created":1654962878132,"text":"源码结构"},"children":[{"data":{"id":"cknfdq1bn8o0","created":1654962885970,"text":"compiler"},"children":[{"data":{"id":"cknfe5v11r40","created":1654962920418,"text":"所有权，借用规则"},"children":[]}]},{"data":{"id":"cknfdyd5qko0","created":1654962904100,"text":"core"},"children":[{"data":{"id":"cknfegni87k0","created":1654962943908,"text":"no std"},"children":[]},{"data":{"id":"cknff32dkag0","created":1654962992696,"text":"嵌入式开发"},"children":[]}]},{"data":{"id":"cknfdrq4mu00","created":1654962889647,"text":"std"},"children":[{"data":{"id":"cknfew02dcw0","created":1654962977319,"text":"OS 相关"},"children":[]}]}]},{"data":{"id":"ckq01fvmlgg0","created":1655224286710,"text":"rustc","note":"reference: https://doc.rust-lang.org/rustc\n\nhttps://github.com/rust-lang/rust/tree/master/src/doc/rustc\n\nhttps://rustc-dev-guide.rust-lang.org/"},"children":[{"data":{"id":"ckq03yykecg0","created":1655224484975,"text":"看cargo如何调用rustc：cargo build --verbose"},"children":[]},{"data":{"id":"ckqpzfxhim00","created":1655297478953,"text":"命令行的参数"},"children":[{"data":{"id":"ckqpzpitvj40","created":1655297499833,"text":"-h get help"},"children":[]},{"data":{"id":"ckqq03vo1sw0","created":1655297531084,"text":"--cfg 条件编译"},"children":[]},{"data":{"id":"ckqq0fc1ku00","created":1655297556019,"text":"-l / -L"},"children":[]},{"data":{"id":"ckqqa7wgm880","created":1655298323481,"text":"--emit： asm, llvm-bc, llvm-ir, mir, obj"},"children":[]},{"data":{"id":"ckqrcukyd3s0","created":1655301350690,"text":"-C Codegen相关的"},"children":[]}]},{"data":{"id":"ckqrhkv3mww0","created":1655301721356,"text":"profile-guided optimization (PGO)","expandState":"expand"},"children":[{"data":{"id":"ckqrt1599c80","created":1655302618804,"text":"收集运行时的分支执行等数据，指导编译时优化"},"children":[]},{"data":{"id":"ckqt4j6ce200","created":1655306341168,"text":"安装 the llvm-tools-preview component "},"children":[{"data":{"id":"ckqt4smwwzc0","created":1655306361761,"text":"rustup component add llvm-tools-preview"},"children":[]},{"data":{"id":"ckqt4tn6mw80","created":1655306363954,"text":"加到path里。\n~/.rustup/toolchains/<toolchain>/lib/rustlib/<target-triple>/bin/"},"children":[]}]},{"data":{"id":"ckqs1rvngyw0","created":1655303303910,"text":"use PGO with rustc"},"children":[{"data":{"id":"ckqs1tfro600","created":1655303307303,"text":"1 rustc -Cprofile-generate=/tmp/pgo-data main.rs"},"children":[]},{"data":{"id":"ckqs1urfotk0","created":1655303310185,"text":"2  ./main  generates a default_<id>.profraw file"},"children":[]},{"data":{"id":"ckqs1vgm3ww0","created":1655303311708,"text":"3  using LLVM's llvm-profdata tool, Convert the .profraw file into a .profdata file "},"children":[]},{"data":{"id":"ckqs1w51x680","created":1655303313186,"text":"4 rustc -Cprofile-use=merged.profdata main.rs"},"children":[]}]},{"data":{"id":"ckqt9r8b22o0","created":1655306750522,"text":"use PGO with cargo"},"children":[{"data":{"id":"ckqt9x43iow0","created":1655306763328,"text":"https://clang.llvm.org/docs/UsersManual.html#profile-guided-optimization"},"children":[]}]}]},{"data":{"id":"ckqrhnhsczc0","created":1655301727081,"text":" Linker-plugin based LTO"},"children":[{"data":{"id":"ckr4l9zphs80","created":1655338685576,"text":"-C linker-plugin-lto"},"children":[]},{"data":{"id":"ckr4lf1dwr40","created":1655338696561,"text":"分支主题"},"children":[]}]}]},{"data":{"id":"clkvtxs2j480","created":1658360772980,"text":"类型系统"},"children":[{"data":{"id":"clkvu1kou080","created":1658360781241,"text":"类型是对数据的区分，包含数据在内存的长度，对齐，数据可以进行的操作，数据本身等信息"},"children":[]},{"data":{"id":"clkwvdk3v8w0","created":1658363706802,"text":"除了let，fn，static，const定义性语句，其他都是表达式，有类型。"},"children":[]},{"data":{"id":"clkwxjpe7xc0","created":1658363876910,"text":"unit类型（）"},"children":[{"data":{"id":"clkwyh0f3uw0","created":1658363949411,"text":"作为空的返回值"},"children":[]},{"data":{"id":"clkwyrgdm800","created":1658363972143,"text":"运用到数据结构中，Reuslt<(), Error>,   HashMap<K, ()>   ==> HashSet"},"children":[]}]},{"data":{"id":"clkwzlp57eo0","created":1658364037977,"text":"类型推导"},"children":[]},{"data":{"id":"clkvwixms8o0","created":1658360975759,"text":"类型系统"},"children":[{"data":{"id":"clkvwkc83z40","created":1658360978817,"text":"对类型进行定义，检查，处理的系统"},"children":[]},{"data":{"id":"clkvybqbvug0","created":1658361116807,"text":"按定义后类型是否可以隐式转换"},"children":[{"data":{"id":"clkvyvua9sw0","created":1658361160582,"text":"强类型 （rust， java）"},"children":[]},{"data":{"id":"clkvyzaj7w00","created":1658361168094,"text":"弱类型 （c/c++, javascript）"},"children":[]}]},{"data":{"id":"clkvzi521kg0","created":1658361209122,"text":"按类型检查的时机，编译时 or 运行时"},"children":[{"data":{"id":"clkvzv5xks80","created":1658361237473,"text":"静态类型系统 （rust， java，swift）"},"children":[]},{"data":{"id":"clkvzyr0x400","created":1658361245279,"text":"动态类型系统 （golang）"},"children":[]}]},{"data":{"id":"clkw0dq4vxc0","created":1658361277877,"text":"多态的处理"},"children":[{"data":{"id":"clkw0p2sjjc0","created":1658361302587,"text":"在使用相同的接口时，不同类型的对象采用不同的实现"},"children":[]},{"data":{"id":"clkw2cbq2o00","created":1658361431557,"text":"动态类型系统： duck type 鸭子类型"},"children":[]},{"data":{"id":"clkw2kpet0w0","created":1658361449799,"text":"静态类型系统"},"children":[{"data":{"id":"clkw3bedt400","created":1658361507905,"text":" 参数多态： 类型是满足某些约束的参数，非具体类型。rust的泛型 "},"children":[]},{"data":{"id":"clkw3cxbmq80","created":1658361511227,"text":"特设多态： 函数的重载。 1+1， matrix1+matrix2。rust的trait"},"children":[]},{"data":{"id":"clkw3ixxsk00","created":1658361524325,"text":"子类型多态:  运行时子类型可以被当作父类型。 rust的trait object"},"children":[]}]}]}]},{"data":{"id":"cll4nv7647k0","created":1658385687167,"text":"编译器的infer type 类型推导"},"children":[]},{"data":{"id":"ckzoqkgx2680","created":1656208002056,"text":"原始类型"},"children":[{"data":{"id":"clkcbq3sbns0","created":1658305744631,"text":"&str: 胖指针（ptr+len）。str是DST"},"children":[]},{"data":{"id":"clkcc4qnb540","created":1658305776489,"text":"&String: 普通指针。String携带了长度信息"},"children":[]},{"data":{"id":"clkvtx14lio0","created":1658360771351,"text":"字符，整数，浮点数，布尔数"},"children":[]},{"data":{"id":"clkx6onb9ww0","created":1658364592946,"text":"数组[T; N],  [u32; 16] ;  元组（T， U，...）， （\"hello\", 1, false）"},"children":[]},{"data":{"id":"clkx94m2d9c0","created":1658364784427,"text":"函数指针， fn(&str) ->usize"},"children":[]},{"data":{"id":"clkx96512ow0","created":1658364787751,"text":"指针， 裸指针 *const T,  *mut T"},"children":[{"data":{"id":"clkxb4wzjxk0","created":1658364941817,"text":"let x= 1;  let raw = &x as *const i32"},"children":[]},{"data":{"id":"clkxbe22xnk0","created":1658364961715,"text":"let mut y = 2; let raw_mut = &mut y as *mut i32;"},"children":[]}]},{"data":{"id":"clkx9687n0g0","created":1658364787943,"text":"引用, &T, &mut T"},"children":[{"data":{"id":"clkxcmv2h0g0","created":1658365059246,"text":"let x =1;  let ref = &x;"},"children":[]},{"data":{"id":"clkxcs96tk00","created":1658365070984,"text":"let mut y = 2; let ref_mut = &mut y;"},"children":[]}]},{"data":{"id":"clkx96cg11s0","created":1658364788199,"text":"slice切片。 动态大小的连续序列[T], DST。 所有一般使用其引用"},"children":[{"data":{"id":"clkxhyqbo8g0","created":1658365476901,"text":"&[T], &mut [T]"},"children":[]},{"data":{"id":"clkxi4zotwg0","created":1658365490528,"text":"Box<[T]>。  \nlet boxed: Box<[i32]> = Box::new([1,2,3]);\nlet slice = &boxed;"},"children":[]}]},{"data":{"id":"clkx94nngqg0","created":1658364784523,"text":"str 字符串切片，DST。 所以一般使用其引用"},"children":[{"data":{"id":"clkxjpx6ou80","created":1658365614454,"text":"&str, &mut str\nlet s: &str = \"hello world\";"},"children":[]}]},{"data":{"id":"clkxdf0za0w0","created":1658365120553,"text":"unit () "},"children":[{"data":{"id":"clkxkjhx67s0","created":1658365678834,"text":"let a = ();\nlet result = Ok(());\nfn hi() {} 等于 fn hi() ->() {}"},"children":[]}]},{"data":{"id":"clkxdiik0g00","created":1658365128147,"text":"nerver, !类型"},"children":[]}]},{"data":{"id":"ckq03xpv3r40","created":1655224482272,"text":"复合类型"},"children":[{"data":{"id":"ckzor33zx5s0","created":1656208042634,"text":"enum和模式匹配"},"children":[{"data":{"id":"ckzor7g51lc0","created":1656208052075,"text":"代数数据类型"},"children":[]},{"data":{"id":"ckzoreig2bc0","created":1656208067452,"text":"定义一种可以枚举所有值的类型"},"children":[]},{"data":{"id":"ckzqjs1pmc80","created":1656213112221,"text":"提取enum类型中的值"},"children":[{"data":{"id":"ckzqne8d19c0","created":1656213395606,"text":"match 处理各种枚举值"},"children":[]},{"data":{"id":"ckzqni309y80","created":1656213403989,"text":"if let 处理一种枚举值"},"children":[]}]}]},{"data":{"id":"ckzosn0jo340","created":1656208164325,"text":"tuple"},"children":[]},{"data":{"id":"ckzot6tqsz40","created":1656208207449,"text":"struct"},"children":[]},{"data":{"id":"ckzqqxuni6g0","created":1656213673405,"text":"常见的集合类型"},"children":[{"data":{"id":"ckzqr2z2n1c0","created":1656213684556,"text":"vectors"},"children":[]},{"data":{"id":"ckzqr59dx080","created":1656213689533,"text":"Strings"},"children":[]},{"data":{"id":"ckzqr7nbgu80","created":1656213694729,"text":"HashMap"},"children":[]}]}]}]},{"data":{"id":"cknrlanhxww0","created":1654997332715,"text":"ownership and lifetime"},"children":[{"data":{"id":"clk7rhk8j280","created":1658292874312,"text":"背景"},"children":[{"data":{"id":"clk9t906dow0","created":1658298654633,"text":"堆上内存被随意引用，给内存管理带来很大麻烦"},"children":[]},{"data":{"id":"clk7rnoqvqo0","created":1658292887646,"text":"面对堆内存中对象多次引用的场景"},"children":[{"data":{"id":"clk9qsmatmo0","created":1658298462238,"text":"C/C++ 手动释放内存，智能指针"},"children":[]},{"data":{"id":"clk9r1k7yoo0","created":1658298481702,"text":"java/golang 使用GC跟踪堆内存，stop the world"},"children":[]},{"data":{"id":"clk9rdc32bk0","created":1658298507332,"text":"rust从管理引用的角度出发， 限制代码中的堆引用行为"},"children":[]}]}]},{"data":{"id":"ckz4c0vf3s80","created":1656150440101,"text":"存在的意义：在编译时期插入内存管理的代码，保证堆内存安全"},"children":[]},{"data":{"id":"clk9t6merc00","created":1658298649447,"text":"如何限制堆上数据的引用行为？"},"children":[{"data":{"id":"clk9wp4dar40","created":1658298924808,"text":"一个变量被赋给另外一个变量"},"children":[]},{"data":{"id":"clk9wwjbr8g0","created":1658298940949,"text":"一个变量作为参数传给函数"},"children":[]},{"data":{"id":"clk9x2mcizc0","created":1658298954193,"text":"一个变量作为返回值从callee函数中返回给caller"},"children":[]},{"data":{"id":"clka24wfq5k0","created":1658299350978,"text":"限制： 通过单一所有权控制 引用的行为"},"children":[{"data":{"id":"clka26970wo0","created":1658299353925,"text":"单一所有权： 一个值只能被一个变量拥有，或者move到另外一个变量上"},"children":[]},{"data":{"id":"clka2kku3ew0","created":1658299385104,"text":"当所有者离开scope时，堆上的数据被drop"},"children":[]}]}]},{"data":{"id":"clkc4bgtsjk0","created":1658305164219,"text":"如何自行管理堆内存"},"children":[{"data":{"id":"clkc4n45obs0","created":1658305189574,"text":"Box::leak"},"children":[]},{"data":{"id":"clkc4quqf0g0","created":1658305197712,"text":"Box:into_raw"},"children":[]},{"data":{"id":"clkc4t9uhnk0","created":1658305202979,"text":"std::Mem::ManuallyDrop"},"children":[]}]},{"data":{"id":"clk7rznqinc0","created":1658292913706,"text":"copy vs move"},"children":[{"data":{"id":"clka8a8t2c00","created":1658299832794,"text":"为了避免赋值or传参后 所有权移动后不能访问的情况"},"children":[{"data":{"id":"clkabsf1qc80","created":1658300107446,"text":"1. 数据impl了Copy trait。栈上的值在赋值和传参时，进行栈上的拷贝（浅拷贝）"},"children":[]},{"data":{"id":"clkabw610rc0","created":1658300115608,"text":"2. 借用& 原有的数据"},"children":[]}]},{"data":{"id":"clkaqt42ev40","created":1658301284421,"text":"浅拷贝 vs 深拷贝"},"children":[{"data":{"id":"clkar3my1ag0","created":1658301307331,"text":"浅拷贝：按位复制"},"children":[{"data":{"id":"clkasuup0e00","created":1658301444937,"text":"如果拷贝的数据包含指针，不会连同指针指向的数据一起拷贝。"},"children":[]},{"data":{"id":"clkasvuwyu00","created":1658301447127,"text":"不包含指针的数据，浅拷贝等于深拷贝"},"children":[]}]},{"data":{"id":"clkasd7ajjs0","created":1658301406516,"text":"深拷贝：clone"},"children":[]}]},{"data":{"id":"clka6km4pxc0","created":1658299698639,"text":"copy语义： impl Copy trait的数据类型在赋值和传参时进行Copy，不进行所有权的move"},"children":[{"data":{"id":"clkae9uz8a00","created":1658300302143,"text":"基本数据类型:  bool, char， i32， usize"},"children":[]},{"data":{"id":"clkaf6qce340","created":1658300373697,"text":"函数， 裸指针，不可变引用，array/tuple的元素实现了Copy"},"children":[]},{"data":{"id":"clkao9ue2mo0","created":1658301085749,"text":"不允许同时impl Copy和Drop。 Copy的都是在栈上，Drop管理的堆上"},"children":[{"data":{"id":"clkatjbbws80","created":1658301498186,"text":"rust不允许为在堆上分配的结构实现Copy，因为堆上的结构实现了Drop"},"children":[]}]},{"data":{"id":"clkapqdmmo80","created":1658301200105,"text":"clone语义是深拷贝了。深拷贝后的堆内存，需要Drop"},"children":[]}]},{"data":{"id":"clka6o3cyow0","created":1658299706211,"text":"move语义： 限制堆上对象的单一所有权"},"children":[{"data":{"id":"clkaec2pmm00","created":1658300306964,"text":"可变引用，非固定大小的数据（Vec）"},"children":[]}]}]},{"data":{"id":"ckt6u8apy880","created":1655548149298,"text":"借用（引用）"},"children":[{"data":{"id":"ckt77s2fm080","created":1655549211067,"text":"当值没有实现Copy语义，又不希望所有权被转移，可用借用"},"children":[]},{"data":{"id":"clkb7anx7lc0","created":1658302576454,"text":"函数传参的2种方式"},"children":[{"data":{"id":"clkb7mfrqqw0","created":1658302602082,"text":"传值： java里传整数"},"children":[]},{"data":{"id":"clkb7oczaxk0","created":1658302606267,"text":"传引用： java里传堆上的对象"},"children":[]}]},{"data":{"id":"clkb8sifsv40","created":1658302693669,"text":"rust里所有参数的传递都是传值"},"children":[{"data":{"id":"clkba2aup4g0","created":1658302793342,"text":"显示的传某个数据的&T，&mut T 引用给函数"},"children":[]}]},{"data":{"id":"ckt77vaxvr40","created":1655549218112,"text":"mutablity 只针对borrow(&mut T) or binging (let mut), struct field 无效"},"children":[]},{"data":{"id":"ckz49ncu0iw0","created":1656150253950,"text":"保证2点"},"children":[{"data":{"id":"ckz4a34veug0","created":1656150288298,"text":"为了避免数据竞争，同一个作用域内："},"children":[{"data":{"id":"clkbva0b6800","created":1658304455766,"text":"可变引用和不可变引用不能同时存在"},"children":[]},{"data":{"id":"clkbvbpvoiw0","created":1658304459489,"text":"只允许一个活跃的可变引用"},"children":[]}]}]}]},{"data":{"id":"clk621bah200","created":1658288058729,"text":"一个值可以有多个所有者"},"children":[{"data":{"id":"clk62m3dsds0","created":1658288103963,"text":"单一所有权 vs 多个所有权"},"children":[{"data":{"id":"clk62zb73740","created":1658288132734,"text":"单一所有权满足大部分情况， rustc在借用检查器完成静态检查"},"children":[]},{"data":{"id":"clk66p8darc0","created":1658288424251,"text":"静态检查满足大部分场景，不影响运行性能"},"children":[]},{"data":{"id":"clk66za3oeo0","created":1658288446124,"text":"运行时动态检查满足特殊场景"},"children":[]},{"data":{"id":"clk63jjyww00","created":1658288176800,"text":"规则例外："},"children":[{"data":{"id":"clk63ltp8h40","created":1658288181742,"text":"有向无环图中，一个节点可以有多个节点指向它"},"children":[]},{"data":{"id":"clk647asjn40","created":1658288228488,"text":"2个线程访问同一处共享内存"},"children":[]},{"data":{"id":"clk65ev4tzs0","created":1658288323319,"text":"程序在运行时会遇到，在编译器里无法静态检查，rust提供"},"children":[]}]},{"data":{"id":"clk64ie732g0","created":1658288252638,"text":"std::rc:Rc 引用计数的智能指针"},"children":[{"data":{"id":"clk6csfbx0g0","created":1658288901388,"text":"Box::leak()机制 在堆上允许一个口子"},"children":[]},{"data":{"id":"clkcjiov9u00","created":1658306355405,"text":"x=Rc::new(), x.clone()  "},"children":[]},{"data":{"id":"clk70j8xy8o0","created":1658290762150,"text":"运行时通过对引用计数的检查，保证堆内存的释放"},"children":[]},{"data":{"id":"clk694vogvk0","created":1658288615041,"text":"std:rc:Arc  内部使用atomic ，线程安全"},"children":[]}]},{"data":{"id":"clkcyo1mcew0","created":1658307542523,"text":"std::cell::RefCell"},"children":[{"data":{"id":"clk62vs610w0","created":1658288125053,"text":"内部可变性 interior mutability"},"children":[{"data":{"id":"clkdbez4cqg0","created":1658308541515,"text":"对没有声明为mut的值进行修改，运行时拿到可变借用，修改内部的数据"},"children":[]},{"data":{"id":"clkdclm2vko0","created":1658308634328,"text":"RefCell:new(); borrow_mut()"},"children":[]}]},{"data":{"id":"clkdehi3kgg0","created":1658308782108,"text":"编译通过，不符合规则则运行时产生panic"},"children":[]},{"data":{"id":"clkdghecf9k0","created":1658308938610,"text":"Option<Rc<RefCell<T>>>"},"children":[]},{"data":{"id":"clkdijocjps0","created":1658309100296,"text":"RefCell 非线程安全，Mutex和RwLock"},"children":[]}]}]}]},{"data":{"id":"ckt6uarskbk0","created":1655548154684,"text":"lifetime"},"children":[{"data":{"id":"clkcjnqqmow0","created":1658306366402,"text":"存在的意义：确保引用的生命周期不超过所引用的值的生命周期。 针对引用而言"},"children":[]},{"data":{"id":"clkg7cla4xs0","created":1658316686197,"text":"值的生命周期"},"children":[{"data":{"id":"clkg7lotdt40","created":1658316706002,"text":"静态生命周期 ‘static， 全局变量，静态变量，字符串字面量 , 函数指针（进程的虚拟地址空间：BSS， Data， Text， Heap(leaked)）"},"children":[]},{"data":{"id":"clkg9qtb18w0","created":1658316873886,"text":"'a  在函数的入参和返回值之间建立生命周期约束"},"children":[]}]}]},{"data":{"id":"clkj859zv0g0","created":1658325211971,"text":"cheats.rs"},"children":[]}]},{"data":{"id":"ckzot9237lc0","created":1656208212307,"text":"module， crate， workspace"},"children":[{"data":{"id":"ckzqprv90p40","created":1656213582016,"text":"module：组织rust代码的命令空间"},"children":[]},{"data":{"id":"ckzqu110x7c0","created":1656213915413,"text":"mod 声明模块命令空间"},"children":[{"data":{"id":"ckzqvfrkz540","created":1656214025858,"text":"可以是mod xx {...}"},"children":[]},{"data":{"id":"ckzqvocpej40","created":1656214044549,"text":"也可以是在mod filename。 代码在filename.rs。"},"children":[]},{"data":{"id":"ckzqxb39yh40","created":1656214172410,"text":"默认是private。可是public"},"children":[]},{"data":{"id":"ckzqxnznygg0","created":1656214200489,"text":"use 把module引起到正在使用use的命令空间里"},"children":[]},{"data":{"id":"clkwpca2le80","created":1658363233833,"text":"a"},"children":[{"data":{"id":"clkwpf8owg80","created":1658363240280,"text":"b"},"children":[{"data":{"id":"clkwpgp8lb40","created":1658363243457,"text":"c"},"children":[{"data":{"id":"clkwpi4t0x40","created":1658363246575,"text":"d"},"children":[]}]}]}]}]}]},{"data":{"id":"ckzospl0vwo0","created":1656208169917,"text":"错误处理"},"children":[{"data":{"id":"ckzotomjfog0","created":1656208246196,"text":"分支主题"},"children":[]}]},{"data":{"id":"ckzotpkqzf40","created":1656208248264,"text":"函数式语言的特点：iterators和closures"},"children":[{"data":{"id":"ckzouimsrbs0","created":1656208311515,"text":"分支主题"},"children":[]}]},{"data":{"id":"ckzoukmnzeg0","created":1656208315860,"text":"智能指针"},"children":[{"data":{"id":"clkclgxr0g80","created":1658306508317,"text":"Box把任何数据创建在堆上"},"children":[]}]},{"data":{"id":"cknffde9c8o0","created":1654963015183,"text":"泛型与trait"},"children":[]},{"data":{"id":"cknrlqhie8o0","created":1654997367181,"text":"thread safe and lock free"},"children":[]},{"data":{"id":"cknrm3dyf5s0","created":1654997395265,"text":"meta programming"},"children":[{"data":{"id":"cknrmik964w0","created":1654997428297,"text":"反射"},"children":[{"data":{"id":"cknrsvryljk0","created":1654997927246,"text":"Module std::any"},"children":[]},{"data":{"id":"cknrsxmp6200","created":1654997931282,"text":"bevy_reflect 库应用"},"children":[]}]},{"data":{"id":"cknrmkqlf340","created":1654997433034,"text":"宏"},"children":[{"data":{"id":"cknrmrx3qsw0","created":1654997448665,"text":"编译过程"},"children":[]},{"data":{"id":"cknrmvybrc80","created":1654997457446,"text":"声明宏"},"children":[{"data":{"id":"cknt3sm3v3s0","created":1655001603478,"text":"宏展开命令： cargo rustc – -Z unstable-options –pretty=expanded"},"children":[]}]},{"data":{"id":"cknrmxnmn1c0","created":1654997461153,"text":"分支主题"},"children":[]}]}]},{"data":{"id":"cknrkxrf5ag0","created":1654997304654,"text":"unsafe rust"},"children":[{"data":{"id":"ckntzy4rvpc0","created":1655004123144,"text":"Unsafe Rust: How and when (not) to use it"},"children":[]}]}]},"template":"filetree","theme":"fresh-green","version":"1.4.43"}