{
  "type": "excalidraw",
  "version": 2,
  "source": "http://localhost:3000",
  "elements": [
    {
      "id": "GH_gN5pN-3ohQePnC8Rcy",
      "type": "rectangle",
      "x": 484.19140625,
      "y": 186.953125,
      "width": 387,
      "height": 77.8359375,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1947991771,
      "version": 32,
      "versionNonce": 1545194171,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "dvZ-81Q_oEwZwhK64ZX6a"
        }
      ],
      "updated": 1660774738752,
      "link": null,
      "locked": false
    },
    {
      "id": "dvZ-81Q_oEwZwhK64ZX6a",
      "type": "text",
      "x": 489.19140625,
      "y": 197.87109375,
      "width": 377,
      "height": 56,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1842294299,
      "version": 103,
      "versionNonce": 1665766005,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660774738752,
      "link": null,
      "locked": false,
      "text": "变量赋值的两种语义：move vs copy\nc++向左，rust向右。",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "center",
      "verticalAlign": "middle",
      "baseline": 50,
      "containerId": "GH_gN5pN-3ohQePnC8Rcy",
      "originalText": "变量赋值的两种语义：move vs copy\nc++向左，rust向右。"
    },
    {
      "id": "KcNdtr9U2Fi2S0FBpbejN",
      "type": "rectangle",
      "x": 485.375,
      "y": 280.6484375,
      "width": 631.0937499999999,
      "height": 1102.1015625,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1082322043,
      "version": 237,
      "versionNonce": 1325967925,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660773899877,
      "link": null,
      "locked": false
    },
    {
      "id": "rAjxdBag8r8nI6Ifjnl9S",
      "type": "text",
      "x": 499.52734375,
      "y": 297.93359375,
      "width": 565,
      "height": 1034,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1866382203,
      "version": 1797,
      "versionNonce": 1901392757,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660774021963,
      "link": null,
      "locked": false,
      "text": "rust中的move和copy\n    栈上的值的赋值默认是copy，\n    堆上是move。\n    均可以改为clone， borrow。\n\nC++中的move和copy\n    值类型 和 引用类型\n    \n    值分为 左值 和 右值\n        右值：只能在等式右边出现（常量，临时变量a+2）\n    引用分为 左值引用 和 右值引用\n    \n    左值引用和右值引用 类似指针。\n    不同指针的时引用在声明时一定要初始化\n    \n    //cannot bind non-const lvalue reference of type `int&` to an rvalue of type `int`\n    int& ref = 4; \n    // ok 允许 const的左值引用绑定到右值\n    const int& ref = 4;\n    void print(const std::string& s); print(\"español\"); \n\n    int&& i = 42;\n    int j = 42;\n    // cannot bind rvalue reference of type `int&&` to lvalue of type `int`\n    // int&& 定义右值， j是左值，右值引用不能绑定到左值。\n    int&& k = j;   \n    // ok \n    // 未移动任何东西。 std::move 类似static_cast<int&&>\n    // 把左值 转换为 右值引用\n    int&& k = std::move(j);\n\n    \n\n    \n\n函数签名与函数传参\n    rust中简单，要消耗掉这个值的话，直接传值。不消耗传引用。\n    c++中复杂，普通的值类型，const左值引用，普通左值引用，\n        右值引用，指针。",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 1028,
      "containerId": null,
      "originalText": "rust中的move和copy\n    栈上的值的赋值默认是copy，\n    堆上是move。\n    均可以改为clone， borrow。\n\nC++中的move和copy\n    值类型 和 引用类型\n    \n    值分为 左值 和 右值\n        右值：只能在等式右边出现（常量，临时变量a+2）\n    引用分为 左值引用 和 右值引用\n    \n    左值引用和右值引用 类似指针。\n    不同指针的时引用在声明时一定要初始化\n    \n    //cannot bind non-const lvalue reference of type `int&` to an rvalue of type `int`\n    int& ref = 4; \n    // ok 允许 const的左值引用绑定到右值\n    const int& ref = 4;\n    void print(const std::string& s); print(\"español\"); \n\n    int&& i = 42;\n    int j = 42;\n    // cannot bind rvalue reference of type `int&&` to lvalue of type `int`\n    // int&& 定义右值， j是左值，右值引用不能绑定到左值。\n    int&& k = j;   \n    // ok \n    // 未移动任何东西。 std::move 类似static_cast<int&&>\n    // 把左值 转换为 右值引用\n    int&& k = std::move(j);\n\n    \n\n    \n\n函数签名与函数传参\n    rust中简单，要消耗掉这个值的话，直接传值。不消耗传引用。\n    c++中复杂，普通的值类型，const左值引用，普通左值引用，\n        右值引用，指针。"
    },
    {
      "id": "UAeTJf0RMO8Y7yaIHIxBL",
      "type": "rectangle",
      "x": 1135.953125,
      "y": 281.3593749999999,
      "width": 510.7812499999999,
      "height": 584.9296875000001,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 176970293,
      "version": 73,
      "versionNonce": 1819702107,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660774181410,
      "link": null,
      "locked": false
    },
    {
      "id": "HeabQbK8Qx8M8Ms5jVI1r",
      "type": "text",
      "x": 1169.1171875,
      "y": 288.37890625,
      "width": 374,
      "height": 530,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2040877051,
      "version": 636,
      "versionNonce": 1361393973,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660775094211,
      "link": null,
      "locked": false,
      "text": "#include <vector>\nvoid test_move(std::vector<int>&& nums) {\n    ...\n    std::vector<int> nums1 = nums;\n    std::vector<int> nums2 = std::move(nums);\n}\nint main() {\n    std::vector<int> nums = {1, 2, 3};\n    test_move(std::move(nums));\n    // nums的值是什么，什么都 有可能...\n    // test_move内部移动了， nums为空\n    // test_move内部修改了，nums也修改了\n    // 建议是使用move后，变量不要再使用了\n    return 0;\n}\n\ntemplate<typename T>\nvoid foo(T&& t) {}\n\n",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 525,
      "containerId": null,
      "originalText": "#include <vector>\nvoid test_move(std::vector<int>&& nums) {\n    ...\n    std::vector<int> nums1 = nums;\n    std::vector<int> nums2 = std::move(nums);\n}\nint main() {\n    std::vector<int> nums = {1, 2, 3};\n    test_move(std::move(nums));\n    // nums的值是什么，什么都 有可能...\n    // test_move内部移动了， nums为空\n    // test_move内部修改了，nums也修改了\n    // 建议是使用move后，变量不要再使用了\n    return 0;\n}\n\ntemplate<typename T>\nvoid foo(T&& t) {}\n\n"
    },
    {
      "id": "aq2zsvD_IoOnpzSXQr266",
      "type": "rectangle",
      "x": 1134.98046875,
      "y": 878.94140625,
      "width": 710.1796875,
      "height": 3143.6640624999995,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1098763605,
      "version": 525,
      "versionNonce": 1381555253,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660778449362,
      "link": null,
      "locked": false
    },
    {
      "id": "0R5MnwfOVAgcF8MBdYcVV",
      "type": "text",
      "x": 1156,
      "y": 883.5,
      "width": 395,
      "height": 561,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 739327547,
      "version": 711,
      "versionNonce": 843533147,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660775849971,
      "link": null,
      "locked": false,
      "text": "c++11 引入 右值引用。\n    \n    \n    不考虑引用，减少干扰。\n    左值是可以取地址，在等号左边。\n    右值没法取地址，在等号右边。\n    int a = 5; \n    // a 是左值，可以&a\n    // 5 是右值，不能&5\n\n    struct A {\n        A(int a = 0) {\n            a_ = a;\n        }\n        int a_;\n    }\n    // a是左值。 A()是临时变量，没法&取地址。\n    // 临时变量就是右值。\n    A a = A();\n\n   有地址的变量是左值。\n    没有地址的字面值，临时值是右值。",
      "fontSize": 19.52061417079208,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 556,
      "containerId": null,
      "originalText": "c++11 引入 右值引用。\n    \n    \n    不考虑引用，减少干扰。\n    左值是可以取地址，在等号左边。\n    右值没法取地址，在等号右边。\n    int a = 5; \n    // a 是左值，可以&a\n    // 5 是右值，不能&5\n\n    struct A {\n        A(int a = 0) {\n            a_ = a;\n        }\n        int a_;\n    }\n    // a是左值。 A()是临时变量，没法&取地址。\n    // 临时变量就是右值。\n    A a = A();\n\n   有地址的变量是左值。\n    没有地址的字面值，临时值是右值。"
    },
    {
      "id": "BovO9YuFTr7xuCd6WzkD6",
      "type": "rectangle",
      "x": 1177.6640625,
      "y": 921.296875,
      "width": 196,
      "height": 38,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 135019605,
      "version": 64,
      "versionNonce": 1946669877,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "9BZLNQuoAZWEBvi9K038H"
        }
      ],
      "updated": 1660775716031,
      "link": null,
      "locked": false
    },
    {
      "id": "9BZLNQuoAZWEBvi9K038H",
      "type": "text",
      "x": 1182.6640625,
      "y": 926.796875,
      "width": 186,
      "height": 28,
      "angle": 0,
      "strokeColor": "#5c940d",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1222038965,
      "version": 6,
      "versionNonce": 1130845653,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660775714935,
      "link": null,
      "locked": false,
      "text": "什么是左值，右值",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "center",
      "verticalAlign": "middle",
      "baseline": 22,
      "containerId": "BovO9YuFTr7xuCd6WzkD6",
      "originalText": "什么是左值，右值"
    },
    {
      "id": "Xl4bk0vlUSGxR-7RCqzro",
      "type": "rectangle",
      "x": 1167.5078125,
      "y": 1485.6640625,
      "width": 262,
      "height": 38,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2030912923,
      "version": 188,
      "versionNonce": 902482075,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "yo9eGPcqezZjO0ginSdal"
        }
      ],
      "updated": 1660775795243,
      "link": null,
      "locked": false
    },
    {
      "id": "yo9eGPcqezZjO0ginSdal",
      "type": "text",
      "x": 1172.5078125,
      "y": 1490.6640625,
      "width": 252,
      "height": 28,
      "angle": 0,
      "strokeColor": "#5c940d",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 94361659,
      "version": 167,
      "versionNonce": 2006442645,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660775795243,
      "link": null,
      "locked": false,
      "text": "什么是左值引用，右值引用",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "center",
      "verticalAlign": "middle",
      "baseline": 22,
      "containerId": "Xl4bk0vlUSGxR-7RCqzro",
      "originalText": "什么是左值引用，右值引用"
    },
    {
      "id": "EA032JvQc39_IXl7KdUfZ",
      "type": "text",
      "x": 1154,
      "y": 1537.5,
      "width": 558,
      "height": 795,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1899133499,
      "version": 1296,
      "versionNonce": 466323579,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660776898490,
      "link": null,
      "locked": false,
      "text": "引用本质是别名。通过引用修改变量的值。传参时避免\n拷贝，原理与指针类似。\n    有指针了，为啥还需要引用？ 降低指针的使用。\n    指针+ 左右值引用，理解成本变大。\n\n左值引用：\n    能指向左值，不能指向右值的是左值引用。\n    int a = 5;\n    int &ref_a = a; // 左值引用 引用了 左值 ok\n    int &ref_a = 5; //左值引用  指向 右值， 编译失败\n\n    引用是变量的别名。因为右值没有地址，没法被修改\n所以左值引用无法指向右值。\n\n    但是consts int &ref_a = 5; //编译通过。\n    consts左值引用不会修改指向的值。\n   这就是为啥void push_back(const value_type& val);\n    vec.push_back(5)是可以的。\n\n右值引用：\n    右值引用的标志是&&。\n    右值引用是为右值而设计的，可以指向右值，不能指向左值。\n\n    int &&ref_a_right = 5; // ok\n    int a = 5;\n    int &&ref_a_left = a; // failed，右值引用 不能指向 左值\n    ref_a_right = 6; //ok, 右值引用的用途：可以修改右值\n    \n    \n        ",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 790,
      "containerId": null,
      "originalText": "引用本质是别名。通过引用修改变量的值。传参时避免\n拷贝，原理与指针类似。\n    有指针了，为啥还需要引用？ 降低指针的使用。\n    指针+ 左右值引用，理解成本变大。\n\n左值引用：\n    能指向左值，不能指向右值的是左值引用。\n    int a = 5;\n    int &ref_a = a; // 左值引用 引用了 左值 ok\n    int &ref_a = 5; //左值引用  指向 右值， 编译失败\n\n    引用是变量的别名。因为右值没有地址，没法被修改\n所以左值引用无法指向右值。\n\n    但是consts int &ref_a = 5; //编译通过。\n    consts左值引用不会修改指向的值。\n   这就是为啥void push_back(const value_type& val);\n    vec.push_back(5)是可以的。\n\n右值引用：\n    右值引用的标志是&&。\n    右值引用是为右值而设计的，可以指向右值，不能指向左值。\n\n    int &&ref_a_right = 5; // ok\n    int a = 5;\n    int &&ref_a_left = a; // failed，右值引用 不能指向 左值\n    ref_a_right = 6; //ok, 右值引用的用途：可以修改右值\n    \n    \n        "
    },
    {
      "id": "uOMqmEiko2-jWHjoy1WAH",
      "type": "text",
      "x": 1596,
      "y": 901.5,
      "width": 246,
      "height": 27,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1334539867,
      "version": 58,
      "versionNonce": 1592864597,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660776973557,
      "link": null,
      "locked": false,
      "text": "参考：知乎 腾讯技术工程。",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 21,
      "containerId": null,
      "originalText": "参考：知乎 腾讯技术工程。"
    },
    {
      "id": "__fydkP4ur00-DDVRHRNc",
      "type": "rectangle",
      "x": 1166.96484375,
      "y": 2322.98828125,
      "width": 263.3359375,
      "height": 73.2421875,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2096669077,
      "version": 41,
      "versionNonce": 1771059131,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "bV_MaqgMZzHGtuUIp3dWx"
        }
      ],
      "updated": 1660777102535,
      "link": null,
      "locked": false
    },
    {
      "id": "bV_MaqgMZzHGtuUIp3dWx",
      "type": "text",
      "x": 1171.96484375,
      "y": 2346.109375,
      "width": 253,
      "height": 28,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1970470997,
      "version": 52,
      "versionNonce": 1267946267,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660777081625,
      "link": null,
      "locked": false,
      "text": "对左右值引用 本质的讨论",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "center",
      "verticalAlign": "middle",
      "baseline": 22,
      "containerId": "__fydkP4ur00-DDVRHRNc",
      "originalText": "对左右值引用 本质的讨论"
    },
    {
      "id": "N3aVBJMkWOZULjCoeGttA",
      "type": "rectangle",
      "x": 1166.84765625,
      "y": 2415.703125,
      "width": 567,
      "height": 66,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1618769269,
      "version": 170,
      "versionNonce": 2046332251,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "Ye4VS3mFjOmfV4Tm-13FF"
        }
      ],
      "updated": 1660777143181,
      "link": null,
      "locked": false
    },
    {
      "id": "Ye4VS3mFjOmfV4Tm-13FF",
      "type": "text",
      "x": 1171.84765625,
      "y": 2434.703125,
      "width": 557,
      "height": 28,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 301405595,
      "version": 106,
      "versionNonce": 2108401173,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660777147725,
      "link": null,
      "locked": false,
      "text": "右值引用有办法指向左值吗？std::move",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "center",
      "verticalAlign": "middle",
      "baseline": 22,
      "containerId": "N3aVBJMkWOZULjCoeGttA",
      "originalText": "右值引用有办法指向左值吗？std::move"
    },
    {
      "id": "0nE5bj-d_XEVU40QxUdJj",
      "type": "text",
      "x": 1193,
      "y": 2497.5,
      "width": 599,
      "height": 186,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 469930203,
      "version": 426,
      "versionNonce": 1364137813,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660777476610,
      "link": null,
      "locked": false,
      "text": "int a = 5;\nint &ref_a_left = a;       //左值引用 指向 左值\nint &&ref_a_right = std::move(a); // std::move将左值 转为 右值。\ncout<< a; // output: 5\n\nstd::move 很迷惑，与rust不同。std::move移动不了什么，唯一做的是cast。\n相当于 static_cast<T&&>(lvalue)。",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 180,
      "containerId": null,
      "originalText": "int a = 5;\nint &ref_a_left = a;       //左值引用 指向 左值\nint &&ref_a_right = std::move(a); // std::move将左值 转为 右值。\ncout<< a; // output: 5\n\nstd::move 很迷惑，与rust不同。std::move移动不了什么，唯一做的是cast。\n相当于 static_cast<T&&>(lvalue)。"
    },
    {
      "id": "qXEypsgQTZAs0uNMu9Kza",
      "type": "rectangle",
      "x": 1184.81640625,
      "y": 2706.28515625,
      "width": 539.0742187499999,
      "height": 62.76171875000001,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1115382965,
      "version": 149,
      "versionNonce": 683357557,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "DYIFvRHucp8jVMmBJNv6_"
        }
      ],
      "updated": 1660777868996,
      "link": null,
      "locked": false
    },
    {
      "id": "DYIFvRHucp8jVMmBJNv6_",
      "type": "text",
      "x": 1189.81640625,
      "y": 2724.166015625,
      "width": 529,
      "height": 28,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 474228053,
      "version": 69,
      "versionNonce": 23724053,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660777853296,
      "link": null,
      "locked": false,
      "text": "左值引用，右值引用本身是左值还是右值？",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "center",
      "verticalAlign": "middle",
      "baseline": 22,
      "containerId": "qXEypsgQTZAs0uNMu9Kza",
      "originalText": "左值引用，右值引用本身是左值还是右值？"
    },
    {
      "id": "WNND1sy0mY8MSN3tqKT3m",
      "type": "text",
      "x": 1201.9921875,
      "y": 2789.5,
      "width": 649,
      "height": 795,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1416692987,
      "version": 1482,
      "versionNonce": 1520663445,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660779105253,
      "link": null,
      "locked": false,
      "text": "被声明出来的左，右值引用都是左值。因为被声明出来的左右值都是\n有地址的，也位于等号的左边。\n // 要求传入右值引用\nvoid change(int&& right_value) { right_value = 8; }\nint a = 5;\nint &ref_a_left = a;\nint &&ref_a_right = std::move(a);\nchange(a); //failed  a是左值，要求右值。\nchange(ref_a_left); //failed 左值引用本身是左值。\nchange(ref_a_right); //failed 右值引用本身是左值。\n\nchange(std::move(a)); //ok\nchange(std::move(ref_a_left)); //ok\nchange(std::move(ref_a_right)); //ok\n\nchange(5); //ok\n\ncout<<&a<< \" \"<<&ref_a_left<< \" \"<<&ref_a_right<<end; // 三个左值的地址是相同的。\n\n\nstd::move 返回一个右值引用int&&, 它是左值还是右值？\nint&& ref = std::move(a); ref指向的必须是右值，所以move返回int&& 是右值。\n所以右值引用 既可以是左值，也可以是右值。 有名称是左值，否是右值。\n例如：作为函数返回的&&是右值，声明出来的是左值。 \n\n总结：\n    在性能上，左右值没有区别，可以避免拷贝。\n    右值引用可以指向右值，可以通过std::move指向左值。\n    作为函数形参时，右值引用更加灵活。\n",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 790,
      "containerId": null,
      "originalText": "被声明出来的左，右值引用都是左值。因为被声明出来的左右值都是\n有地址的，也位于等号的左边。\n // 要求传入右值引用\nvoid change(int&& right_value) { right_value = 8; }\nint a = 5;\nint &ref_a_left = a;\nint &&ref_a_right = std::move(a);\nchange(a); //failed  a是左值，要求右值。\nchange(ref_a_left); //failed 左值引用本身是左值。\nchange(ref_a_right); //failed 右值引用本身是左值。\n\nchange(std::move(a)); //ok\nchange(std::move(ref_a_left)); //ok\nchange(std::move(ref_a_right)); //ok\n\nchange(5); //ok\n\ncout<<&a<< \" \"<<&ref_a_left<< \" \"<<&ref_a_right<<end; // 三个左值的地址是相同的。\n\n\nstd::move 返回一个右值引用int&&, 它是左值还是右值？\nint&& ref = std::move(a); ref指向的必须是右值，所以move返回int&& 是右值。\n所以右值引用 既可以是左值，也可以是右值。 有名称是左值，否是右值。\n例如：作为函数返回的&&是右值，声明出来的是左值。 \n\n总结：\n    在性能上，左右值没有区别，可以避免拷贝。\n    右值引用可以指向右值，可以通过std::move指向左值。\n    作为函数形参时，右值引用更加灵活。\n"
    },
    {
      "id": "ZzMv5jVJV-Tkw4ixGxL8b",
      "type": "rectangle",
      "x": 1200.359375,
      "y": 3589.859375,
      "width": 350,
      "height": 58.1171875,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 607731957,
      "version": 53,
      "versionNonce": 533710037,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "RU9H-2BhLQDmv97Wpu0MG"
        }
      ],
      "updated": 1660779134637,
      "link": null,
      "locked": false
    },
    {
      "id": "RU9H-2BhLQDmv97Wpu0MG",
      "type": "text",
      "x": 1205.359375,
      "y": 3605.41796875,
      "width": 340,
      "height": 28,
      "angle": 0,
      "strokeColor": "#5c940d",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2143942837,
      "version": 68,
      "versionNonce": 1890909045,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660779133775,
      "link": null,
      "locked": false,
      "text": "右值引用和std::move的使用场景",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "center",
      "verticalAlign": "middle",
      "baseline": 22,
      "containerId": "ZzMv5jVJV-Tkw4ixGxL8b",
      "originalText": "右值引用和std::move的使用场景"
    },
    {
      "id": "R7Meaa2AywVirkpJRI40b",
      "type": "text",
      "x": 1224,
      "y": 3686.5,
      "width": 550,
      "height": 265,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 913033115,
      "version": 638,
      "versionNonce": 1866322299,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1660780411209,
      "link": null,
      "locked": false,
      "text": "1. 实现移动语义。stl容器中移动构造函数，移动赋值构造函数，\n参数为左值引用意味着拷贝，为右值引用时意味着移动\nstd::move 本身只做类型转换，对性能无影响。\n在类中实现移动语义，避免深拷贝。\n\n2 完美转发std::forward，主要在模版编程。\nstd::forward<T>(u) 。 T为左值引用类型，u被转为T类型的左值。\n                                  T为，u被转为T类型的右值。\n\n",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 260,
      "containerId": null,
      "originalText": "1. 实现移动语义。stl容器中移动构造函数，移动赋值构造函数，\n参数为左值引用意味着拷贝，为右值引用时意味着移动\nstd::move 本身只做类型转换，对性能无影响。\n在类中实现移动语义，避免深拷贝。\n\n2 完美转发std::forward，主要在模版编程。\nstd::forward<T>(u) 。 T为左值引用类型，u被转为T类型的左值。\n                                  T为，u被转为T类型的右值。\n\n"
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}