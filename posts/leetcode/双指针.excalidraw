{
  "type": "excalidraw",
  "version": 2,
  "source": "http://localhost:3000",
  "elements": [
    {
      "type": "rectangle",
      "version": 107,
      "versionNonce": 1432121303,
      "isDeleted": false,
      "id": "J40NUSbuI2kcrFUG6Xvn_",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 60.25041198730469,
      "y": -261.96754455566406,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 505.875,
      "height": 353.50390625,
      "seed": 263297529,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1659761598119,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 157,
      "versionNonce": 401513815,
      "isDeleted": false,
      "id": "fVBJm-Eyi41Uu7ngsNNks",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 98.33634948730469,
      "y": -255.47145080566406,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 251,
      "height": 106,
      "seed": 1762574871,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1659761819481,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "双指针 (扫描线， 滑动窗口...)\n    快慢指针\n    左右端的指针\n    固定间距的指针",
      "baseline": 101,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "双指针 (扫描线， 滑动窗口...)\n    快慢指针\n    左右端的指针\n    固定间距的指针"
    },
    {
      "type": "text",
      "version": 233,
      "versionNonce": 231397015,
      "isDeleted": false,
      "id": "lK2bbwHQAxbiv1iy0AIsa",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 89.03556823730469,
      "y": -91.86598205566406,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 279,
      "height": 159,
      "seed": 575361529,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1659761789726,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "lc 680 valid palindrome II\nlc 408 valid word abbrevaiation\nlc 15    3sum\nlc 253   meeting rooms II\nlc 1570  dot product of two sparse vectors\nlc 42    trapping rain water",
      "baseline": 154,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "lc 680 valid palindrome II\nlc 408 valid word abbrevaiation\nlc 15    3sum\nlc 253   meeting rooms II\nlc 1570  dot product of two sparse vectors\nlc 42    trapping rain water"
    },
    {
      "type": "rectangle",
      "version": 175,
      "versionNonce": 524325623,
      "isDeleted": false,
      "id": "jHgHN5SLSChKb8smUg2y2",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 60.59025573730469,
      "y": 104.01097106933594,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 503.48046875,
      "height": 441.03515625,
      "seed": 411150615,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1659762202350,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 92,
      "versionNonce": 652566425,
      "isDeleted": false,
      "id": "RdnHucoWC3oUQ4LBUSo-w",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 74.30509948730469,
      "y": 114.40159606933594,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 174,
      "height": 106,
      "seed": 1065325785,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1659762600569,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "lc 680 valid palindrome II\n 最多删除一个元素\ninput: s= \"abca\"\noutput: true",
      "baseline": 101,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "lc 680 valid palindrome II\n 最多删除一个元素\ninput: s= \"abca\"\noutput: true"
    },
    {
      "type": "text",
      "version": 318,
      "versionNonce": 599729753,
      "isDeleted": false,
      "id": "zAq3CcapzUFH-e_i0gdW3",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 68.84025573730469,
      "y": 240.43675231933594,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 220,
      "height": 292,
      "seed": 1154467801,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1659762700386,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "bool is_palin(string s) {\n    int left, right = 0, s.length() -1\n    while (left < right) {\n        if s[left] == s[right] {\n            left++; right--;\n        } else {\n            return false;\n        }    \n    }\n    return true;\n}",
      "baseline": 286,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "bool is_palin(string s) {\n    int left, right = 0, s.length() -1\n    while (left < right) {\n        if s[left] == s[right] {\n            left++; right--;\n        } else {\n            return false;\n        }    \n    }\n    return true;\n}"
    },
    {
      "type": "text",
      "version": 313,
      "versionNonce": 1442434041,
      "isDeleted": false,
      "id": "Zb07eijT5Vh1nra7UmnY0",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 339.1879119873047,
      "y": 173.28440856933594,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 216,
      "height": 345,
      "seed": 172620345,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1659762745345,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "bool valid_palindrome(string s) {\n    int left, right = 0, s.length()-1\n    while(left < right && \n        s[left] == s[right] ) {\n        left++; right--;\n    }\n    if (left >= right)\n        return true;\n    if is_palin(s, i+1, j) \n        || is_palin(s, i, j-1)\n        return true;\n    return false;\n}",
      "baseline": 339,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "bool valid_palindrome(string s) {\n    int left, right = 0, s.length()-1\n    while(left < right && \n        s[left] == s[right] ) {\n        left++; right--;\n    }\n    if (left >= right)\n        return true;\n    if is_palin(s, i+1, j) \n        || is_palin(s, i, j-1)\n        return true;\n    return false;\n}"
    },
    {
      "type": "rectangle",
      "version": 245,
      "versionNonce": 1400782871,
      "isDeleted": false,
      "id": "o-juigxic-7g3Awd0Eteh",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 57.85588073730469,
      "y": 558.0344085693359,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 506.51562500000006,
      "height": 109.85156249999997,
      "seed": 586146233,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1659763122241,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 146,
      "versionNonce": 1604734647,
      "isDeleted": false,
      "id": "nH1PBfH9ahqY4OWRkqI7P",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 77.31291198730469,
      "y": 561.4094085693359,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 301,
      "height": 106,
      "seed": 1640415575,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1659763317638,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "lc 408 valid word abbreviation\n\"s10n\" == \"s asdfghjklm n\"\n\nlc15  3 sum  sorting array.  [ left  cur_i right]",
      "baseline": 101,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "lc 408 valid word abbreviation\n\"s10n\" == \"s asdfghjklm n\"\n\nlc15  3 sum  sorting array.  [ left  cur_i right]"
    },
    {
      "type": "rectangle",
      "version": 127,
      "versionNonce": 1329102412,
      "isDeleted": false,
      "id": "HJvLi-QEo4kQvpgCpcojT",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 58.43009948730469,
      "y": 686.1183929443359,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 519.90234375,
      "height": 558.95703125,
      "seed": 1172135284,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1660208251406,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 801,
      "versionNonce": 2129629462,
      "isDeleted": false,
      "id": "M7sjOefD-lLdUn4K3nrxU",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 70.53556823730469,
      "y": 693.1340179443359,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 491,
      "height": 557,
      "seed": 467871092,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1661061604411,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "lc 3 无重复的最长子串\n\n思路： 滑动窗口，从右边开始试探，当在map中重复时，\n    左边一直往右移动直到没有重复。\n\n    int longest_substring(string s){\n        unordered_map<char, int> map;\n        int res = 0;\n        int left = 0;\n        for (int i = 0; i < s.length(); i++) {\n            // 进窗口\n            map.push(s[i], map.getOrDefault(s[i], 0));\n            while( map.get(s[i]) > 1) { //窗口不符合条件时出\n                map.push( s[left],   map.get( s[left] ) -1 );\n                left++;\n            }\n            // 现在窗口有效，计算结果\n            res = max(res, i - left + 1);\n        }\n        return res;\n    }",
      "baseline": 551,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "lc 3 无重复的最长子串\n\n思路： 滑动窗口，从右边开始试探，当在map中重复时，\n    左边一直往右移动直到没有重复。\n\n    int longest_substring(string s){\n        unordered_map<char, int> map;\n        int res = 0;\n        int left = 0;\n        for (int i = 0; i < s.length(); i++) {\n            // 进窗口\n            map.push(s[i], map.getOrDefault(s[i], 0));\n            while( map.get(s[i]) > 1) { //窗口不符合条件时出\n                map.push( s[left],   map.get( s[left] ) -1 );\n                left++;\n            }\n            // 现在窗口有效，计算结果\n            res = max(res, i - left + 1);\n        }\n        return res;\n    }"
    },
    {
      "type": "rectangle",
      "version": 277,
      "versionNonce": 1107044112,
      "isDeleted": false,
      "id": "msqsmEydiSSrmDN84AUkP",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 58.59025573730469,
      "y": 1265.262924194336,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 560.1796875,
      "height": 1192.7187500000005,
      "seed": 659222288,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1660318499932,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 1431,
      "versionNonce": 1335291376,
      "isDeleted": false,
      "id": "kkIwCCQ7KF7kLuVbCfbaN",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 72.53556823730469,
      "y": 1275.009017944336,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 460,
      "height": 1166,
      "seed": 1974212880,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1660318613040,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "lc 76 最小覆盖子串：给定一个字符串s和t，\n                                返回s中覆盖t中所有字符的最小子串\n思路： 滑动窗口。\n        \n        string min_window(string s, string t) {\n            unordered_map<char, int> map;\n            for (char ch : t) {\n                map.put(ch, map.getOrDefault(ch, 0) + 1);\n            }\n            int left, right = 0, 0;\n            int startMin = 0;\n            int len = MAX_INT;\n            while( right < s.size() ) {\n                if ( map.Contain(s[right]) ){\n                        map.put(s[right], map.get(s[right]) - 1);\n                }\n                right++;\n                while( check(map) ) {\n                    // 更新窗口的起始位置，窗口长度\n                    if ( (right - left) < len ) {\n                        len = right - left ;\n                        startMin = left;\n                    }\n                    if ( map.Contain(s[left]) ) {\n                        // 恢复子串的条件\n                        map.put(s[left], map.get(s[left]) + 1);\n                    }\n                    // 缩小窗口\n                        left++;\n                }\n            }\n            if (len = MAX_INT) {\n                return \"\";\n            }\n            return s.substring(startMin, startMin + len);\n        }\n        bool check(unsorted_map<char, int> map) {\n            for (val : map.values()) {\n                if (value > 0) {\n                    return false;\n                }\n            }\n            return true;\n        }",
      "baseline": 1161,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "lc 76 最小覆盖子串：给定一个字符串s和t，\n                                返回s中覆盖t中所有字符的最小子串\n思路： 滑动窗口。\n        \n        string min_window(string s, string t) {\n            unordered_map<char, int> map;\n            for (char ch : t) {\n                map.put(ch, map.getOrDefault(ch, 0) + 1);\n            }\n            int left, right = 0, 0;\n            int startMin = 0;\n            int len = MAX_INT;\n            while( right < s.size() ) {\n                if ( map.Contain(s[right]) ){\n                        map.put(s[right], map.get(s[right]) - 1);\n                }\n                right++;\n                while( check(map) ) {\n                    // 更新窗口的起始位置，窗口长度\n                    if ( (right - left) < len ) {\n                        len = right - left ;\n                        startMin = left;\n                    }\n                    if ( map.Contain(s[left]) ) {\n                        // 恢复子串的条件\n                        map.put(s[left], map.get(s[left]) + 1);\n                    }\n                    // 缩小窗口\n                        left++;\n                }\n            }\n            if (len = MAX_INT) {\n                return \"\";\n            }\n            return s.substring(startMin, startMin + len);\n        }\n        bool check(unsorted_map<char, int> map) {\n            for (val : map.values()) {\n                if (value > 0) {\n                    return false;\n                }\n            }\n            return true;\n        }"
    },
    {
      "type": "rectangle",
      "version": 66,
      "versionNonce": 853415408,
      "isDeleted": false,
      "id": "LDeNW4DbNbTwTv4Q-gRYy",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 61.48478698730469,
      "y": 2478.669174194336,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 556.1875,
      "height": 365.3515625,
      "seed": 2002899952,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1660318541468,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 132,
      "versionNonce": 856232074,
      "isDeleted": false,
      "id": "jbrG55GKu8saYUl-kN94F",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 88.53556823730469,
      "y": 2492.134017944336,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 280,
      "height": 133,
      "seed": 1820710896,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1661066326725,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "lc 521 \nlc 443  \nlc 407 \nlc 992 subarrays with k different integers.\nlc 397. 双指针求雨水问题",
      "baseline": 127,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "lc 521 \nlc 443  \nlc 407 \nlc 992 subarrays with k different integers.\nlc 397. 双指针求雨水问题"
    },
    {
      "type": "text",
      "version": 5,
      "versionNonce": 209221104,
      "isDeleted": false,
      "id": "1nfLkLB08Q8kfyJIvR10C",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 136.5355682373047,
      "y": 2619.134017944336,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 30,
      "height": 27,
      "seed": 373830128,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1660318645903,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "KMP",
      "baseline": 21,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "KMP"
    },
    {
      "id": "yR7TN4HuoOnkK0tRWxFep",
      "type": "rectangle",
      "x": 588.8519744873047,
      "y": 686.1379241943359,
      "width": 494.7031249999999,
      "height": 543.8554687499999,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1350107914,
      "version": 422,
      "versionNonce": 431872778,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1661063144070,
      "link": null,
      "locked": false
    },
    {
      "id": "I6gQ_9Qrz1JGSkveoIKfz",
      "type": "text",
      "x": 596.5355682373047,
      "y": 690.1340179443359,
      "width": 397,
      "height": 504,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2080092182,
      "version": 490,
      "versionNonce": 1641667146,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1661063132181,
      "link": null,
      "locked": false,
      "text": "lc 159 longest substring with at most two distinct characters\n\nint longest_sub_two_distinct(string s){\n    unordered_map<char, int> map;\n    int left, res = 0, 0;\n    for (int i = 0; i < s.size(); i++) {\n        map.put( s[i], map.getOrDefault(s[i], 0) + 1);\n        while( map.size() > 2) {\n            map.put(s[left], map.get(s[left]) -1);\n            if ( (map.get(s[left]) == 0 ) {\n                map.remove(s[left]);\n            }\n            left++;\n        }\n        res = max(res, i - left + 1);\n    }\n    return res;\n}\n",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 498,
      "containerId": null,
      "originalText": "lc 159 longest substring with at most two distinct characters\n\nint longest_sub_two_distinct(string s){\n    unordered_map<char, int> map;\n    int left, res = 0, 0;\n    for (int i = 0; i < s.size(); i++) {\n        map.put( s[i], map.getOrDefault(s[i], 0) + 1);\n        while( map.size() > 2) {\n            map.put(s[left], map.get(s[left]) -1);\n            if ( (map.get(s[left]) == 0 ) {\n                map.remove(s[left]);\n            }\n            left++;\n        }\n        res = max(res, i - left + 1);\n    }\n    return res;\n}\n"
    },
    {
      "id": "JsyYlWicpuElHWQZh3wHA",
      "type": "text",
      "x": 632.7543182373047,
      "y": 1180.876205444336,
      "width": 389,
      "height": 27,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1747053002,
      "version": 103,
      "versionNonce": 1388279958,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1661063170253,
      "link": null,
      "locked": false,
      "text": "lc 340 longest substring with at most k distinct characters.",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 21,
      "containerId": null,
      "originalText": "lc 340 longest substring with at most k distinct characters."
    },
    {
      "id": "FKJydvf2VZP2rwVJuMnog",
      "type": "rectangle",
      "x": 649.0746307373047,
      "y": 1277.653549194336,
      "width": 506.3671875,
      "height": 377.234375,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1522853258,
      "version": 45,
      "versionNonce": 313483786,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1661064409160,
      "link": null,
      "locked": false
    },
    {
      "id": "o-tBNmH0kwM792orQTbD4",
      "type": "text",
      "x": 688.5355682373047,
      "y": 1286.134017944336,
      "width": 396,
      "height": 53,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1694185686,
      "version": 64,
      "versionNonce": 1983047882,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1661064429934,
      "link": null,
      "locked": false,
      "text": "lc 395 longest substring with at least k repeating characters\n",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 48,
      "containerId": null,
      "originalText": "lc 395 longest substring with at least k repeating characters\n"
    },
    {
      "id": "Aows26ARG0B1-GYeyiJgk",
      "type": "rectangle",
      "x": 649.6761932373047,
      "y": 1672.540267944336,
      "width": 508.81640625,
      "height": 510.6445312500002,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 372195210,
      "version": 139,
      "versionNonce": 1157513878,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1661064908379,
      "link": null,
      "locked": false
    },
    {
      "id": "mJvqmUquiANlQ_QqhUgTm",
      "type": "text",
      "x": 668.5355682373047,
      "y": 1686.134017944336,
      "width": 296,
      "height": 477,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1126072214,
      "version": 429,
      "versionNonce": 911726154,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1661065126233,
      "link": null,
      "locked": false,
      "text": "lc 209 minimum size subarray sum\n\nint min_sub_array_len(int[] arr, int target) {\n    int min_len = INT_MAX;\n    int left = 0;\n    int tmp_sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i]\n        while (sum >= target ) {\n            if (i - left + 1 < min_len) {\n                min _len = i - left + 1;\n            }\n            sum -= arr[left];\n            left++;\n        }\n    }\n    return min_len == INT_MAX ? 0 : min_len;\n}",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 472,
      "containerId": null,
      "originalText": "lc 209 minimum size subarray sum\n\nint min_sub_array_len(int[] arr, int target) {\n    int min_len = INT_MAX;\n    int left = 0;\n    int tmp_sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i]\n        while (sum >= target ) {\n            if (i - left + 1 < min_len) {\n                min _len = i - left + 1;\n            }\n            sum -= arr[left];\n            left++;\n        }\n    }\n    return min_len == INT_MAX ? 0 : min_len;\n}"
    },
    {
      "id": "40k8fKzXdSgDu7MYl-fFc",
      "type": "rectangle",
      "x": 649.6254119873047,
      "y": 2201.352767944336,
      "width": 502.4765625,
      "height": 592.4726562499998,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1482633366,
      "version": 103,
      "versionNonce": 116108298,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1661065179846,
      "link": null,
      "locked": false
    },
    {
      "id": "nddgoZ2_Z0Wj4z4BEiLj1",
      "type": "text",
      "x": 670.5355682373047,
      "y": 2210.247299194336,
      "width": 367,
      "height": 583,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1508232918,
      "version": 654,
      "versionNonce": 832402186,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1661066015403,
      "link": null,
      "locked": false,
      "text": "lc 424 longest repeating character replacement\ninput s = \"ABAB\" k = 2, output = 4\n\n最多变k个字符，最长重复的字符串长度。\n\nint character_replacement(string s, int k) {\n    int left, res = 0, 0;\n    int[] count = int[26]{};\n    for (int i = 0; i < s.size(); i++ ) {\n        count[s[i] - 'A']++;\n        while( i - left + 1 - find_max(count) > k ) {\n            // 需要修改的次数 大于 k时，pop\n            count[s[left] - 'A']--;\n            left++;\n        }\n        res = max(res, i - left + 1);\n    }\n    return res;\n}\nint find_max(int[] count) {\n    // 找出现次数最多的元素的出现次数。\n}",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 578,
      "containerId": null,
      "originalText": "lc 424 longest repeating character replacement\ninput s = \"ABAB\" k = 2, output = 4\n\n最多变k个字符，最长重复的字符串长度。\n\nint character_replacement(string s, int k) {\n    int left, res = 0, 0;\n    int[] count = int[26]{};\n    for (int i = 0; i < s.size(); i++ ) {\n        count[s[i] - 'A']++;\n        while( i - left + 1 - find_max(count) > k ) {\n            // 需要修改的次数 大于 k时，pop\n            count[s[left] - 'A']--;\n            left++;\n        }\n        res = max(res, i - left + 1);\n    }\n    return res;\n}\nint find_max(int[] count) {\n    // 找出现次数最多的元素的出现次数。\n}"
    },
    {
      "id": "FXUbfidq6RcVQcFh0l-F4",
      "type": "rectangle",
      "x": 158.8715057373047,
      "y": 2557.321517944336,
      "width": 0.125,
      "height": 0.125,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2070919306,
      "version": 2,
      "versionNonce": 2129489174,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1661066299644,
      "link": null,
      "locked": false
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}