<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on brettkk</title>
    <link>http://brettkk.github.io/tags/rust/</link>
    <description>Recent content in rust on brettkk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Jan 2023 11:33:56 +0800</lastBuildDate><atom:link href="http://brettkk.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rust concurrency</title>
      <link>http://brettkk.github.io/posts/rust/rust_concurrency/</link>
      <pubDate>Thu, 05 Jan 2023 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_concurrency/</guid>
      <description>异步编程 🔗future， async: 定义一个可并发执行的任务； await 触发这</description>
    </item>
    
    <item>
      <title>rust相关的环境问题 &#43; 类型系统疑问</title>
      <link>http://brettkk.github.io/posts/rust/rust_problem/</link>
      <pubDate>Mon, 21 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_problem/</guid>
      <description>属于名词解释性的文章，知道就是知道，知道是设计者是这么做得而</description>
    </item>
    
    <item>
      <title>rustc</title>
      <link>http://brettkk.github.io/posts/rust/rust%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <pubDate>Tue, 15 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <description>text -&amp;gt; tokens -&amp;gt; ast -&amp;gt; hir -&amp;gt;mir -&amp;gt; llvm ir -&amp;gt; llvm -&amp;gt; 1110 ThinLTO, PGO 快速看下rust语言，ve</description>
    </item>
    
    <item>
      <title>异步运行时tokio</title>
      <link>http://brettkk.github.io/posts/rust/rust%E5%BC%82%E6%AD%A5%E8%BF%90%E8%A1%8C%E6%97%B6tokio/</link>
      <pubDate>Tue, 15 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust%E5%BC%82%E6%AD%A5%E8%BF%90%E8%A1%8C%E6%97%B6tokio/</guid>
      <description>tokio 🔗核心是为了提高系统的吞吐量，而非延迟。 基于os的epol</description>
    </item>
    
    <item>
      <title>rust-library-core</title>
      <link>http://brettkk.github.io/posts/rust/rust_library_core/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_library_core/</guid>
      <description>rust library core 🔗读一下 rust-lang的源码， core正好是不依赖</description>
    </item>
    
    <item>
      <title>rust-library-std</title>
      <link>http://brettkk.github.io/posts/rust/rust_library_std/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_library_std/</guid>
      <description>HashMap 🔗#[derive(Clone)] pub struct RandomState { k0: u64, k1: u64, } // hashmap 的</description>
    </item>
    
    <item>
      <title>rust语言</title>
      <link>http://brettkk.github.io/posts/rust/rust%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Sat, 05 Nov 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust%E8%AF%AD%E8%A8%80/</guid>
      <description>google comprehensive-rust 4days 🔗较短时间4 days入门。 摘要: standard library Option, Result, error handling String Vec HashMap, config hash</description>
    </item>
    
    <item>
      <title>闭包closure</title>
      <link>http://brettkk.github.io/posts/rust/closure_at_go_c_py_rust/</link>
      <pubDate>Fri, 05 Aug 2022 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/closure_at_go_c_py_rust/</guid>
      <description>what&#39;s closure in PL? 🔗 在函数式编程语言中，宣传函数是一等公民，把函数作为</description>
    </item>
    
    <item>
      <title>rust unsafe</title>
      <link>http://brettkk.github.io/posts/rust/rust_unsafe/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_unsafe/</guid>
      <description>fn main() { let mut d = String::from(&amp;#34;aaaa&amp;#34;); let d_len = d.len(); { // 去掉 or 不去掉 let mut e = String::wtih_capacity(d_len); unsafe { // 两个</description>
    </item>
    
  </channel>
</rss>
